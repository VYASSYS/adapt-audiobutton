/*!
 * MediaElementAudioButton.js
 * HTML5 <video> and <audio> shim and player
 * http://mediaelementjs.com/
 *
 * Creates a JavaScript object that mimics HTML5 MediaElementAudioButton API
 * for browsers that don't understand HTML5 or can't play the provided codec
 * Can play MP4 (H.264), Ogg, WebM, FLV, WMV, WMA, ACC, and MP3
 *
 * Copyright 2010-2013, John Dyer (http://j.hn)
 * License: MIT
 *
 */
var mejsaudiobutton = mejs || {};
mejsaudiobutton.version = "2.13.2";
mejsaudiobutton.meIndex = 0;
mejsaudiobutton.plugins = {silverlight: [
    {version: [3, 0], types: ["video/mp4", "video/m4v", "video/mov", "video/wmv", "audio/wma", "audio/m4a", "audio/mp3", "audio/wav", "audio/mpeg"]}
], flash: [
    {version: [9, 0, 124], types: ["video/mp4", "video/m4v", "video/mov", "video/flv", "video/rtmp", "video/x-flv", "audio/flv", "audio/x-flv", "audio/mp3", "audio/m4a", "audio/mpeg", "video/youtube", "video/x-youtube"]}
], youtube: [
    {version: null, types: ["video/youtube", "video/x-youtube", "audio/youtube", "audio/x-youtube"]}
], vimeo: [
    {version: null, types: ["video/vimeo",
        "video/x-vimeo"]}
]};
mejsaudiobutton.Utility_audiobutton = {encodeUrl: function (a) {
    return encodeURIComponent(a)
}, escapeHTML: function (a) {
    return a.toString().split("&").join("&amp;").split("<").join("&lt;").split('"').join("&quot;")
}, absolutizeUrl: function (a) {
    var b_audiobutton = document.createElement("div");
    b_audiobutton.innerHTML = '<a href="' + this.escapeHTML(a) + '">x</a>';
    return b_audiobutton.firstChild.href
}, getScriptPath: function (a) {
    for (var b_audiobutton = 0, c_audiobutton, daudiobutton = "", e = "", g, f, h = document.getElementsByTagName("script"), l = h.length, j = a.length; b_audiobutton < l; b_audiobutton++) {
        g = h[b_audiobutton].src;
        c_audiobutton = g.lastIndexOf("/");
        if (c_audiobutton > -1) {
            f = g.substring(c_audiobutton +
                1);
            g = g.substring(0, c_audiobutton + 1)
        } else {
            f = g;
            g = ""
        }
        for (c_audiobutton = 0; c_audiobutton < j; c_audiobutton++) {
            e = a[c_audiobutton];
            e = f.indexOf(e);
            if (e > -1) {
                daudiobutton = g;
                break
            }
        }
        if (daudiobutton !== "")break
    }
    return daudiobutton
}, secondsToTimeCode: function (a, b_audiobutton, c_audiobutton, daudiobutton) {
    if (typeof c_audiobutton == "undefined")c_audiobutton = false; else if (typeof daudiobutton == "undefined")daudiobutton = 25;
    var e = Math.floor(a / 3600) % 24, g = Math.floor(a / 60) % 60, f = Math.floor(a % 60);
    a = Math.floor((a % 1 * daudiobutton).toFixed(3));
    return(b_audiobutton || e > 0 ? (e < 10 ? "0" + e : e) + ":" : "") + (g < 10 ? "0" + g : g) + ":" + (f < 10 ? "0" + f : f) + (c_audiobutton ? ":" + (a < 10 ? "0" + a : a) : "")
}, timeCodeToSeconds: function (a, b_audiobutton, c_audiobutton, daudiobutton) {
    if (typeof c_audiobutton == "undefined")c_audiobutton = false; else if (typeof daudiobutton ==
        "undefined")daudiobutton = 25;
    a = a.split(":");
    b_audiobutton = parseInt(a[0], 10);
    var e = parseInt(a[1], 10), g = parseInt(a[2], 10), f = 0, h = 0;
    if (c_audiobutton)f = parseInt(a[3]) / daudiobutton;
    return h = b_audiobutton * 3600 + e * 60 + g + f
}, convertSMPTEtoSeconds: function (a) {
    if (typeof a != "string")return false;
    a = a.replace(",", ".");
    var b_audiobutton = 0, c_audiobutton = a.indexOf(".") != -1 ? a.split(".")[1].length : 0, daudiobutton = 1;
    a = a.split(":").reverse();
    for (var e = 0; e < a.length; e++) {
        daudiobutton = 1;
        if (e > 0)daudiobutton = Math.pow(60, e);
        b_audiobutton += Number(a[e]) * daudiobutton
    }
    return Number(b_audiobutton.toFixed(c_audiobutton))
}, removeSwf: function (a) {
    var b_audiobutton = document.getElementById(a);
    if (b_audiobutton && /object|embed/i.test(b_audiobutton.nodeName))if (mejsaudiobutton.MediaFeatures_audiobutton.isIE) {
        b_audiobutton.style.display =
            "none";
        (function () {
            b_audiobutton.readyState == 4 ? mejsaudiobutton.Utility_audiobutton.removeObjectInIE(a) : setTimeout(arguments.callee, 10)
        })()
    } else b_audiobutton.parentNode.removeChild(b_audiobutton)
}, removeObjectInIE: function (a) {
    if (a = document.getElementById(a)) {
        for (var b_audiobutton in a)if (typeof a[b_audiobutton] == "function")a[b_audiobutton] = null;
        a.parentNode.removeChild(a)
    }
}};
mejsaudiobutton.PluginDetector = {hasPluginVersion: function (a, b_audiobutton) {
    var c_audiobutton = this.plugins[a];
    b_audiobutton[1] = b_audiobutton[1] || 0;
    b_audiobutton[2] = b_audiobutton[2] || 0;
    return c_audiobutton[0] > b_audiobutton[0] || c_audiobutton[0] == b_audiobutton[0] && c_audiobutton[1] > b_audiobutton[1] || c_audiobutton[0] == b_audiobutton[0] && c_audiobutton[1] == b_audiobutton[1] && c_audiobutton[2] >= b_audiobutton[2] ? true : false
}, nav: window.navigator, ua: window.navigator.userAgent.toLowerCase(), plugins: [], addPlugin: function (a, b_audiobutton, c_audiobutton, daudiobutton, e) {
    this.plugins[a] = this.detectPlugin(b_audiobutton, c_audiobutton, daudiobutton, e)
}, detectPlugin: function (a, b_audiobutton, c_audiobutton, daudiobutton) {
    var e = [0, 0, 0], g;
    if (typeof this.nav.plugins != "undefined" && typeof this.nav.plugins[a] == "object") {
        if ((c_audiobutton = this.nav.plugins[a].description) && !(typeof this.nav.mimeTypes != "undefined" && this.nav.mimeTypes[b_audiobutton] && !this.nav.mimeTypes[b_audiobutton].enabledPlugin)) {
            e = c_audiobutton.replace(a, "").replace(/^\s+/, "").replace(/\sr/gi, ".").split(".");
            for (a = 0; a < e.length; a++)e[a] = parseInt(e[a].match(/\daudiobutton+/), 10)
        }
    } else if (typeof window.ActiveXObject != "undefined")try {
        if (g = new ActiveXObject(c_audiobutton))e = daudiobutton(g)
    } catch (f) {
    }
    return e
}};
mejsaudiobutton.PluginDetector.addPlugin("flash", "Shockwave Flash", "application/x-shockwave-flash", "ShockwaveFlash.ShockwaveFlash", function (a) {
    var b_audiobutton = [];
    if (a = a.GetVariable("$version")) {
        a = a.split(" ")[1].split(",");
        b_audiobutton = [parseInt(a[0], 10), parseInt(a[1], 10), parseInt(a[2], 10)]
    }
    return b_audiobutton
});
mejsaudiobutton.PluginDetector.addPlugin("silverlight", "Silverlight Plug-In", "application/x-silverlight-2", "AgControl.AgControl", function (a) {
    var b_audiobutton = [0, 0, 0, 0], c_audiobutton = function (daudiobutton, e, g, f) {
        for (; daudiobutton.isVersionSupported(e[0] + "." + e[1] + "." + e[2] + "." + e[3]);)e[g] += f;
        e[g] -= f
    };
    c_audiobutton(a, b_audiobutton, 0, 1);
    c_audiobutton(a, b_audiobutton, 1, 1);
    c_audiobutton(a, b_audiobutton, 2, 1E4);
    c_audiobutton(a, b_audiobutton, 2, 1E3);
    c_audiobutton(a, b_audiobutton, 2, 100);
    c_audiobutton(a, b_audiobutton, 2, 10);
    c_audiobutton(a, b_audiobutton, 2, 1);
    c_audiobutton(a, b_audiobutton, 3, 1);
    return b_audiobutton
});
mejsaudiobutton.MediaFeatures_audiobutton = {init: function () {
    var a = this, b_audiobutton = document, c_audiobutton = mejsaudiobutton.PluginDetector.nav, daudiobutton = mejsaudiobutton.PluginDetector.ua.toLowerCase(), e, g = ["source", "track", "audio", "video"];
    a.isiPad = daudiobutton.match(/ipad/i) !== null;
    a.isiPhone = daudiobutton.match(/iphone/i) !== null;
    a.isiOS = a.isiPhone || a.isiPad;
    a.isAndroid = daudiobutton.match(/android/i) !== null;
    a.isBustedAndroid = daudiobutton.match(/android 2\.[12]/) !== null;
    a.isBustedNativeHTTPS = location.protocol === "https:" && (daudiobutton.match(/android [12]\./) !== null || daudiobutton.match(/macintosh.* version.* safari/) !== null);
    a.isIE = c_audiobutton.appName.toLowerCase().indexOf("microsoft") != -1 || c_audiobutton.appName.toLowerCase().match(/trident/gi) !== null;
    a.isChrome = daudiobutton.match(/chrome/gi) !== null;
    a.isFirefox = daudiobutton.match(/firefox/gi) !== null;
    a.isWebkit = daudiobutton.match(/webkit/gi) !== null;
    a.isGecko = daudiobutton.match(/gecko/gi) !== null && !a.isWebkit && !a.isIE;
    a.isOpera = daudiobutton.match(/opera/gi) !== null;
    a.hasTouch = "ontouchstart"in window;
    a.svg = !!document.createElementNS && !!document.createElementNS("http://www.w3.org/2000/svg", "svg").createSVGRect;
    for (c_audiobutton = 0; c_audiobutton < g.length; c_audiobutton++)e = document.createElement(g[c_audiobutton]);
    a.supportsMediaTag = typeof e.canPlayType !==
        "undefined" || a.isBustedAndroid;
    try {
        e.canPlayType("video/mp4")
    } catch (f) {
        a.supportsMediaTag = false
    }
    a.hasSemiNativeFullScreen = typeof e.webkitEnterFullscreen !== "undefined";
    a.hasNativeFullscreen = typeof e.requestFullscreen !== "undefined";
    a.hasWebkitNativeFullScreen = typeof e.webkitRequestFullScreen !== "undefined";
    a.hasMozNativeFullScreen = typeof e.mozRequestFullScreen !== "undefined";
    a.hasMsNativeFullScreen = typeof e.msRequestFullscreen !== "undefined";
    a.hasTrueNativeFullScreen = a.hasWebkitNativeFullScreen || a.hasMozNativeFullScreen ||
        a.hasMsNativeFullScreen;
    a.nativeFullScreenEnabled = a.hasTrueNativeFullScreen;
    if (a.hasMozNativeFullScreen)a.nativeFullScreenEnabled = document.mozFullScreenEnabled; else if (a.hasMsNativeFullScreen)a.nativeFullScreenEnabled = document.msFullscreenEnabled;
    if (a.isChrome)a.hasSemiNativeFullScreen = false;
    if (a.hasTrueNativeFullScreen) {
        a.fullScreenEventName = "";
        if (a.hasWebkitNativeFullScreen)a.fullScreenEventName = "webkitfullscreenchange"; else if (a.hasMozNativeFullScreen)a.fullScreenEventName = "mozfullscreenchange";
        else if (a.hasMsNativeFullScreen)a.fullScreenEventName = "MSFullscreenChange";
        a.isFullScreen = function () {
            if (e.mozRequestFullScreen)return b_audiobutton.mozFullScreen; else if (e.webkitRequestFullScreen)return b_audiobutton.webkitIsFullScreen; else if (e.hasMsNativeFullScreen)return b_audiobutton.msFullscreenElement !== null
        };
        a.requestFullScreen = function (h) {
            if (a.hasWebkitNativeFullScreen)h.webkitRequestFullScreen(); else if (a.hasMozNativeFullScreen)h.mozRequestFullScreen(); else a.hasMsNativeFullScreen && h.msRequestFullscreen()
        };
        a.cancelFullScreen =
            function () {
                if (a.hasWebkitNativeFullScreen)document.webkitCancelFullScreen(); else if (a.hasMozNativeFullScreen)document.mozCancelFullScreen(); else a.hasMsNativeFullScreen && document.msExitFullscreen()
            }
    }
    if (a.hasSemiNativeFullScreen && daudiobutton.match(/mac os x 10_5/i)) {
        a.hasNativeFullScreen = false;
        a.hasSemiNativeFullScreen = false
    }
}};
mejsaudiobutton.MediaFeatures_audiobutton.init();
mejsaudiobutton.HtmlMediaElement = {pluginType: "native", isFullScreen: false, setCurrentTime: function (a) {
    this.currentTime = a
}, setMuted: function (a) {
    this.muted = a
}, setVolume: function (a) {
    this.volume = a
}, stop: function () {
    this.pause()
}, setSrc: function (a) {
    for (var b_audiobutton = this.getElementsByTagName("source"); b_audiobutton.length > 0;)this.removeChild(b_audiobutton[0]);
    if (typeof a == "string")this.src = a; else {
        var c_audiobutton;
        for (b_audiobutton = 0; b_audiobutton < a.length; b_audiobutton++) {
            c_audiobutton = a[b_audiobutton];
            if (this.canPlayType(c_audiobutton.type)) {
                this.src = c_audiobutton.src;
                break
            }
        }
    }
}, setVideoSize: function (a, b_audiobutton) {
    this.width = a;
    this.height = b_audiobutton
}};
mejsaudiobutton.PluginMediaElement = function (a, b_audiobutton, c_audiobutton) {
    this.id = a;
    this.pluginType = b_audiobutton;
    this.src = c_audiobutton;
    this.events = {};
    this.attributes = {}
};
mejsaudiobutton.PluginMediaElement.prototype = {pluginElement: null, pluginType: "", isFullScreen: false, playbackRate: -1, defaultPlaybackRate: -1, seekable: [], played: [], paused: true, ended: false, seeking: false, duration: 0, error: null, tagName: "", muted: false, volume: 1, currentTime: 0, play: function () {
    if (this.pluginApi != null) {
        this.pluginType == "youtube" ? this.pluginApi.playVideo() : this.pluginApi.playMedia();
        this.paused = false
    }
}, load: function () {
    if (this.pluginApi != null) {
        this.pluginType != "youtube" && this.pluginApi.loadMedia();
        this.paused =
            false
    }
}, pause: function () {
    if (this.pluginApi != null) {
        this.pluginType == "youtube" ? this.pluginApi.pauseVideo() : this.pluginApi.pauseMedia();
        this.paused = true
    }
}, stop: function () {
    if (this.pluginApi != null) {
        this.pluginType == "youtube" ? this.pluginApi.stopVideo() : this.pluginApi.stopMedia();
        this.paused = true
    }
}, canPlayType: function (a) {
    var b_audiobutton, c_audiobutton, daudiobutton, e = mejsaudiobutton.plugins[this.pluginType];
    for (b_audiobutton = 0; b_audiobutton < e.length; b_audiobutton++) {
        daudiobutton = e[b_audiobutton];
        if (mejsaudiobutton.PluginDetector.hasPluginVersion(this.pluginType, daudiobutton.version))for (c_audiobutton = 0; c_audiobutton < daudiobutton.types.length; c_audiobutton++)if (a == daudiobutton.types[c_audiobutton])return"probably"
    }
    return""
},
    positionFullscreenButton: function (a, b_audiobutton, c_audiobutton) {
        this.pluginApi != null && this.pluginApi.positionFullscreenButton && this.pluginApi.positionFullscreenButton(Math.floor(a), Math.floor(b_audiobutton), c_audiobutton)
    }, hideFullscreenButton: function () {
        this.pluginApi != null && this.pluginApi.hideFullscreenButton && this.pluginApi.hideFullscreenButton()
    }, setSrc: function (a) {
        if (typeof a == "string") {
            this.pluginApi.setSrc(mejsaudiobutton.Utility_audiobutton.absolutizeUrl(a));
            this.src = mejsaudiobutton.Utility_audiobutton.absolutizeUrl(a)
        } else {
            var b_audiobutton, c_audiobutton;
            for (b_audiobutton = 0; b_audiobutton < a.length; b_audiobutton++) {
                c_audiobutton = a[b_audiobutton];
                if (this.canPlayType(c_audiobutton.type)) {
                    this.pluginApi.setSrc(mejsaudiobutton.Utility_audiobutton.absolutizeUrl(c_audiobutton.src));
                    this.src = mejsaudiobutton.Utility_audiobutton.absolutizeUrl(a);
                    break
                }
            }
        }
    }, setCurrentTime: function (a) {
        if (this.pluginApi != null) {
            this.pluginType == "youtube" ? this.pluginApi.seekTo(a) : this.pluginApi.setCurrentTime(a);
            this.currentTime = a
        }
    }, setVolume: function (a) {
        if (this.pluginApi != null) {
            this.pluginType == "youtube" ? this.pluginApi.setVolume(a * 100) : this.pluginApi.setVolume(a);
            this.volume = a
        }
    }, setMuted: function (a) {
        if (this.pluginApi != null) {
            if (this.pluginType == "youtube") {
                a ? this.pluginApi.mute() : this.pluginApi.unMute();
                this.muted = a;
                this.dispatchEvent("volumechange")
            } else this.pluginApi.setMuted(a);
            this.muted = a
        }
    }, setVideoSize: function (a, b_audiobutton) {
        if (this.pluginElement.style) {
            this.pluginElement.style.width = a + "px";
            this.pluginElement.style.height = b_audiobutton + "px"
        }
        this.pluginApi != null && this.pluginApi.setVideoSize && this.pluginApi.setVideoSize(a, b_audiobutton)
    }, setFullscreen: function (a) {
        this.pluginApi != null && this.pluginApi.setFullscreen && this.pluginApi.setFullscreen(a)
    }, enterFullScreen: function () {
        this.pluginApi != null && this.pluginApi.setFullscreen && this.setFullscreen(true)
    }, exitFullScreen: function () {
        this.pluginApi != null && this.pluginApi.setFullscreen &&
        this.setFullscreen(false)
    }, addEventListener: function (a, b_audiobutton) {
        this.events[a] = this.events[a] || [];
        this.events[a].push(b_audiobutton)
    }, removeEventListener: function (a, b_audiobutton) {
        if (!a) {
            this.events = {};
            return true
        }
        var c_audiobutton = this.events[a];
        if (!c_audiobutton)return true;
        if (!b_audiobutton) {
            this.events[a] = [];
            return true
        }
        for (i = 0; i < c_audiobutton.length; i++)if (c_audiobutton[i] === b_audiobutton) {
            this.events[a].splice(i, 1);
            return true
        }
        return false
    }, dispatchEvent: function (a) {
        var b_audiobutton, c_audiobutton, daudiobutton = this.events[a];
        if (daudiobutton) {
            c_audiobutton = Array.prototype.slice.call(arguments, 1);
            for (b_audiobutton = 0; b_audiobutton < daudiobutton.length; b_audiobutton++)daudiobutton[b_audiobutton].apply(null, c_audiobutton)
        }
    }, hasAttribute: function (a) {
        return a in
            this.attributes
    }, removeAttribute: function (a) {
        delete this.attributes[a]
    }, getAttribute: function (a) {
        if (this.hasAttribute(a))return this.attributes[a];
        return""
    }, setAttribute: function (a, b_audiobutton) {
        this.attributes[a] = b_audiobutton
    }, remove: function () {
        mejsaudiobutton.Utility_audiobutton.removeSwf(this.pluginElement.id);
        mejsaudiobutton.MediaPluginBridge.unregisterPluginElement(this.pluginElement.id)
    }};
mejsaudiobutton.MediaPluginBridge = {pluginMediaElements: {}, htmlMediaElements: {}, registerPluginElement: function (a, b_audiobutton, c_audiobutton) {
    this.pluginMediaElements[a] = b_audiobutton;
    this.htmlMediaElements[a] = c_audiobutton
}, unregisterPluginElement: function (a) {
    delete this.pluginMediaElements[a];
    delete this.htmlMediaElements[a]
}, initPlugin: function (a) {
    var b_audiobutton = this.pluginMediaElements[a], c_audiobutton = this.htmlMediaElements[a];
    if (b_audiobutton) {
        switch (b_audiobutton.pluginType) {
            case "flash":
                b_audiobutton.pluginElement = b_audiobutton.pluginApi = document.getElementById(a);
                break;
            case "silverlight":
                b_audiobutton.pluginElement = document.getElementById(b_audiobutton.id);
                b_audiobutton.pluginApi = b_audiobutton.pluginElement.Content.MediaElementJS
        }
        b_audiobutton.pluginApi != null && b_audiobutton.success && b_audiobutton.success(b_audiobutton, c_audiobutton)
    }
}, fireEvent: function (a, b_audiobutton, c_audiobutton) {
    var daudiobutton, e;
    if (a = this.pluginMediaElements[a]) {
        b_audiobutton = {type: b_audiobutton, target: a};
        for (daudiobutton in c_audiobutton) {
            a[daudiobutton] = c_audiobutton[daudiobutton];
            b_audiobutton[daudiobutton] = c_audiobutton[daudiobutton]
        }
        e = c_audiobutton.bufferedTime || 0;
        b_audiobutton.target.buffered = b_audiobutton.buffered = {start: function () {
            return 0
        }, end: function () {
            return e
        }, length: 1};
        a.dispatchEvent(b_audiobutton.type, b_audiobutton)
    }
}};
mejsaudiobutton.MediaElementDefaults = {mode: "auto", plugins: ["flash", "silverlight", "youtube", "vimeo"], enablePluginDebug: false, httpsBasicAuthSite: false, type: "", pluginPath: mejsaudiobutton.Utility_audiobutton.getScriptPath(["audiobutton.js", "audiobutton.min.js", "audiobutton-and-player.js", "audiobutton-and-player.min.js"]), flashName: "flashmediaelement.swf", flashStreamer: "", enablePluginSmoothing: false, enablePseudoStreaming: false, pseudoStreamingStartQueryParam: "start", silverlightName: "silverlightmediaelement.xap", defaultVideoWidth: 480,
    defaultVideoHeight: 270, pluginWidth: -1, pluginHeight: -1, pluginVars: [], timerRate: 250, startVolume: 0.8, success: function () {
    }, error: function () {
    }};
mejsaudiobutton.MediaElementAudioButton = function (a, b_audiobutton) {
    return mejsaudiobutton.HtmlMediaElementShim.create(a, b_audiobutton)
};
mejsaudiobutton.HtmlMediaElementShim = {create: function (a, b_audiobutton) {
    var c_audiobutton = mejsaudiobutton.MediaElementDefaults, daudiobutton = typeof a == "string" ? document.getElementById(a) : a, e = daudiobutton.tagName.toLowerCase(), g = e === "audio" || e === "video", f = g ? daudiobutton.getAttribute("src") : daudiobutton.getAttribute("href");
    e = daudiobutton.getAttribute("poster");
    var h = daudiobutton.getAttribute("autoplay"), l = daudiobutton.getAttribute("preload"), j = daudiobutton.getAttribute("controls"), k;
    for (k in b_audiobutton)c_audiobutton[k] = b_audiobutton[k];
    f = typeof f == "undefined" || f === null || f == "" ? null : f;
    e = typeof e == "undefined" || e === null ? "" : e;
    l = typeof l == "undefined" || l === null || l === "false" ?
        "none" : l;
    h = !(typeof h == "undefined" || h === null || h === "false");
    j = !(typeof j == "undefined" || j === null || j === "false");
    k = this.determinePlayback(daudiobutton, c_audiobutton, mejsaudiobutton.MediaFeatures_audiobutton.supportsMediaTag, g, f);
    k.url = k.url !== null ? mejsaudiobutton.Utility_audiobutton.absolutizeUrl(k.url) : "";
    if (k.method == "native") {
        if (mejsaudiobutton.MediaFeatures_audiobutton.isBustedAndroid) {
            daudiobutton.src = k.url;
            daudiobutton.addEventListener("click", function () {
                daudiobutton.play()
            }, false)
        }
        return this.updateNative(k, c_audiobutton, h, l)
    } else if (k.method !== "")return this.createPlugin(k, c_audiobutton, e, h, l, j); else {
        this.createErrorMessage(k, c_audiobutton, e);
        return this
    }
},
    determinePlayback: function (a, b_audiobutton, c_audiobutton, daudiobutton, e) {
        var g = [], f, h, l, j = {method: "", url: "", htmlMediaElement: a, isVideo: a.tagName.toLowerCase() != "audio"}, k;
        if (typeof b_audiobutton.type != "undefined" && b_audiobutton.type !== "")if (typeof b_audiobutton.type == "string")g.push({type: b_audiobutton.type, url: e}); else for (f = 0; f < b_audiobutton.type.length; f++)g.push({type: b_audiobutton.type[f], url: e}); else if (e !== null) {
            l = this.formatType(e, a.getAttribute("type"));
            g.push({type: l, url: e})
        } else for (f = 0; f < a.childNodes.length; f++) {
            h = a.childNodes[f];
            if (h.nodeType == 1 && h.tagName.toLowerCase() == "source") {
                e = h.getAttribute("src");
                l = this.formatType(e, h.getAttribute("type"));
                h = h.getAttribute("media");
                if (!h || !window.matchMedia || window.matchMedia && window.matchMedia(h).matches)g.push({type: l, url: e})
            }
        }
        if (!daudiobutton && g.length > 0 && g[0].url !== null && this.getTypeFromFile(g[0].url).indexOf("audio") > -1)j.isVideo = false;
        if (mejsaudiobutton.MediaFeatures_audiobutton.isBustedAndroid)a.canPlayType = function (m) {
            return m.match(/video\/(mp4|m4v)/gi) !== null ? "maybe" : ""
        };
        if (c_audiobutton && (b_audiobutton.mode === "auto" || b_audiobutton.mode === "auto_plugin" || b_audiobutton.mode === "native") && !(mejsaudiobutton.MediaFeatures_audiobutton.isBustedNativeHTTPS &&
            b_audiobutton.httpsBasicAuthSite === true)) {
            if (!daudiobutton) {
                f = document.createElement(j.isVideo ? "video" : "audio");
                a.parentNode.insertBefore(f, a);
                a.style.display = "none";
                j.htmlMediaElement = a = f
            }
            for (f = 0; f < g.length; f++)if (a.canPlayType(g[f].type).replace(/no/, "") !== "" || a.canPlayType(g[f].type.replace(/mp3/, "mpeg")).replace(/no/, "") !== "") {
                j.method = "native";
                j.url = g[f].url;
                break
            }
            if (j.method === "native") {
                if (j.url !== null)a.src = j.url;
                if (b_audiobutton.mode !== "auto_plugin")return j
            }
        }
        if (b_audiobutton.mode === "auto" || b_audiobutton.mode === "auto_plugin" || b_audiobutton.mode === "shim")for (f =
                                                                                        0; f < g.length; f++) {
            l = g[f].type;
            for (a = 0; a < b_audiobutton.plugins.length; a++) {
                e = b_audiobutton.plugins[a];
                h = mejsaudiobutton.plugins[e];
                for (c_audiobutton = 0; c_audiobutton < h.length; c_audiobutton++) {
                    k = h[c_audiobutton];
                    if (k.version == null || mejsaudiobutton.PluginDetector.hasPluginVersion(e, k.version))for (daudiobutton = 0; daudiobutton < k.types.length; daudiobutton++)if (l == k.types[daudiobutton]) {
                        j.method = e;
                        j.url = g[f].url;
                        return j
                    }
                }
            }
        }
        if (b_audiobutton.mode === "auto_plugin" && j.method === "native")return j;
        if (j.method === "" && g.length > 0)j.url = g[0].url;
        return j
    }, formatType: function (a, b_audiobutton) {
        return a && !b_audiobutton ? this.getTypeFromFile(a) : b_audiobutton && ~b_audiobutton.indexOf(";") ? b_audiobutton.substr(0, b_audiobutton.indexOf(";")) : b_audiobutton
    },
    getTypeFromFile: function (a) {
        a = a.split("?")[0];
        a = a.substring(a.lastIndexOf(".") + 1).toLowerCase();
        return(/(mp4|m4v|ogg|ogv|webm|webmv|flv|wmv|mpeg|mov)/gi.test(a) ? "video" : "audio") + "/" + this.getTypeFromExtension(a)
    }, getTypeFromExtension: function (a) {
        switch (a) {
            case "mp4":
            case "m4v":
                return"mp4";
            case "webm":
            case "webma":
            case "webmv":
                return"webm";
            case "ogg":
            case "oga":
            case "ogv":
                return"ogg";
            default:
                return a
        }
    }, createErrorMessage: function (a, b_audiobutton, c_audiobutton) {
        var daudiobutton = a.htmlMediaElement, e = document.createElement("div");
        e.className =
            "me-cannotplay";
        try {
            e.style.width = daudiobutton.width + "px";
            e.style.height = daudiobutton.height + "px"
        } catch (g) {
        }
        e.innerHTML = b_audiobutton.customError ? b_audiobutton.customError : c_audiobutton !== "" ? '<a href="' + a.url + '"><img src="' + c_audiobutton + '" width="100%" height="100%" /></a>' : '<a href="' + a.url + '"><span>' + mejsaudiobutton.i18n.t("Download File") + "</span></a>";
        daudiobutton.parentNode.insertBefore(e, daudiobutton);
        daudiobutton.style.display = "none";
        b_audiobutton.error(daudiobutton)
    }, createPlugin: function (a, b_audiobutton, c_audiobutton, daudiobutton, e, g) {
        c_audiobutton = a.htmlMediaElement;
        var f = 1, h = 1, l = "me_" + a.method + "_" + mejsaudiobutton.meIndex++, j = new mejsaudiobutton.PluginMediaElement(l, a.method, a.url), k = document.createElement("div"),
            m;
        j.tagName = c_audiobutton.tagName;
        for (m = 0; m < c_audiobutton.attributes.length; m++) {
            var naudiobutton = c_audiobutton.attributes[m];
            naudiobutton.specified == true && j.setAttribute(naudiobutton.name, naudiobutton.value)
        }
        for (m = c_audiobutton.parentNode; m !== null && m.tagName.toLowerCase() != "body";) {
            if (m.parentNode.tagName.toLowerCase() == "p") {
                m.parentNode.parentNode.insertBefore(m, m.parentNode);
                break
            }
            m = m.parentNode
        }
        if (a.isVideo) {
            f = b_audiobutton.pluginWidth > 0 ? b_audiobutton.pluginWidth : b_audiobutton.videoWidth > 0 ? b_audiobutton.videoWidth : c_audiobutton.getAttribute("width") !== null ? c_audiobutton.getAttribute("width") : b_audiobutton.defaultVideoWidth;
            h = b_audiobutton.pluginHeight > 0 ? b_audiobutton.pluginHeight : b_audiobutton.videoHeight >
                0 ? b_audiobutton.videoHeight : c_audiobutton.getAttribute("height") !== null ? c_audiobutton.getAttribute("height") : b_audiobutton.defaultVideoHeight;
            f = mejsaudiobutton.Utility_audiobutton.encodeUrl(f);
            h = mejsaudiobutton.Utility_audiobutton.encodeUrl(h)
        } else if (b_audiobutton.enablePluginDebug) {
            f = 320;
            h = 240
        }
        j.success = b_audiobutton.success;
        mejsaudiobutton.MediaPluginBridge.registerPluginElement(l, j, c_audiobutton);
        k.className = "me-plugin";
        k.id = l + "_container";
        a.isVideo ? c_audiobutton.parentNode.insertBefore(k, c_audiobutton) : document.body.insertBefore(k, document.body.childNodes[0]);
        daudiobutton = ["id=" + l, "isvideo=" + (a.isVideo ? "true" : "false"), "autoplay=" + (daudiobutton ? "true" : "false"), "preload=" + e, "width=" +
            f, "startvolume=" + b_audiobutton.startVolume, "timerrate=" + b_audiobutton.timerRate, "flashstreamer=" + b_audiobutton.flashStreamer, "height=" + h, "pseudostreamstart=" + b_audiobutton.pseudoStreamingStartQueryParam];
        if (a.url !== null)a.method == "flash" ? daudiobutton.push("file=" + mejsaudiobutton.Utility_audiobutton.encodeUrl(a.url)) : daudiobutton.push("file=" + a.url);
        b_audiobutton.enablePluginDebug && daudiobutton.push("debug=true");
        b_audiobutton.enablePluginSmoothing && daudiobutton.push("smoothing=true");
        b_audiobutton.enablePseudoStreaming && daudiobutton.push("pseudostreaming=true");
        g && daudiobutton.push("controls=true");
        if (b_audiobutton.pluginVars)daudiobutton = daudiobutton.concat(b_audiobutton.pluginVars);
        switch (a.method) {
            case "silverlight":
                k.innerHTML =
                    '<object data="data:application/x-silverlight-2," type="application/x-silverlight-2" id="' + l + '" name="' + l + '" width="' + f + '" height="' + h + '" class="mejs-shim"><param name="initParams" value="' + daudiobutton.join(",") + '" /><param name="windowless" value="true" /><param name="background" value="black" /><param name="minRuntimeVersion" value="3.0.0.0" /><param name="autoUpgrade" value="true" /><param name="source" value="' + b_audiobutton.pluginPath + b_audiobutton.silverlightName + '" /></object>';
                break;
            case "flash":
                if (mejsaudiobutton.MediaFeatures_audiobutton.isIE) {
                    a =
                        document.createElement("div");
                    k.appendChild(a);
                    a.outerHTML = '<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="//download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab" id="' + l + '" width="' + f + '" height="' + h + '" class="mejs-shim"><param name="movie" value="' + b_audiobutton.pluginPath + b_audiobutton.flashName + "?x=" + new Date + '" /><param name="flashvars" value="' + daudiobutton.join("&amp;") + '" /><param name="quality" value="high" /><param name="bgcolor" value="#000000" /><param name="wmode" value="transparent" /><param name="allowScriptAccess" value="always" /><param name="allowFullScreen" value="true" /><param name="scale" value="default" /></object>'
                } else k.innerHTML =
                    '<embed id="' + l + '" name="' + l + '" play="true" loop="false" quality="high" bgcolor="#000000" wmode="transparent" allowScriptAccess="always" allowFullScreen="true" type="application/x-shockwave-flash" pluginspage="//www.macromedia.com/go/getflashplayer" src="' + b_audiobutton.pluginPath + b_audiobutton.flashName + '" flashvars="' + daudiobutton.join("&") + '" width="' + f + '" height="' + h + '" scale="default"class="mejs-shim"></embed>';
                break;
            case "youtube":
                b_audiobutton = a.url.substr(a.url.lastIndexOf("=") + 1);
                youtubeSettings = {container: k, containerId: k.id, pluginMediaElement: j,
                    pluginId: l, videoId: b_audiobutton, height: h, width: f};
                mejsaudiobutton.PluginDetector.hasPluginVersion("flash", [10, 0, 0]) ? mejsaudiobutton.YouTubeApi.createFlash(youtubeSettings) : mejsaudiobutton.YouTubeApi.enqueueIframe(youtubeSettings);
                break;
            case "vimeo":
                j.vimeoid = a.url.substr(a.url.lastIndexOf("/") + 1);
                k.innerHTML = '<iframe src="http://player.vimeo.com/video/' + j.vimeoid + '?portrait=0&byline=0&title=0" width="' + f + '" height="' + h + '" frameborder="0" class="mejs-shim"></iframe>'
        }
        c_audiobutton.style.display = "none";
        c_audiobutton.removeAttribute("autoplay");
        return j
    }, updateNative: function (a, b_audiobutton) {
        var c_audiobutton = a.htmlMediaElement, daudiobutton;
        for (daudiobutton in mejsaudiobutton.HtmlMediaElement)c_audiobutton[daudiobutton] = mejsaudiobutton.HtmlMediaElement[daudiobutton];
        b_audiobutton.success(c_audiobutton, c_audiobutton);
        return c_audiobutton
    }};
mejsaudiobutton.YouTubeApi = {isIframeStarted: false, isIframeLoaded: false, loadIframeApi: function () {
    if (!this.isIframeStarted) {
        var a = document.createElement("script");
        a.src = "//www.youtube.com/player_api";
        var b_audiobutton = document.getElementsByTagName("script")[0];
        b_audiobutton.parentNode.insertBefore(a, b_audiobutton);
        this.isIframeStarted = true
    }
}, iframeQueue: [], enqueueIframe: function (a) {
    if (this.isLoaded)this.createIframe(a); else {
        this.loadIframeApi();
        this.iframeQueue.push(a)
    }
}, createIframe: function (a) {
    var b_audiobutton = a.pluginMediaElement, c_audiobutton = new YT.Player(a.containerId,
        {height: a.height, width: a.width, videoId: a.videoId, playerVars: {controls: 0}, events: {onReady: function () {
            a.pluginMediaElement.pluginApi = c_audiobutton;
            mejsaudiobutton.MediaPluginBridge.initPlugin(a.pluginId);
            setInterval(function () {
                mejsaudiobutton.YouTubeApi.createEvent(c_audiobutton, b_audiobutton, "timeupdate")
            }, 250)
        }, onStateChange: function (daudiobutton) {
            mejsaudiobutton.YouTubeApi.handleStateChange(daudiobutton.data, c_audiobutton, b_audiobutton)
        }}})
}, createEvent: function (a, b_audiobutton, c_audiobutton) {
    c_audiobutton = {type: c_audiobutton, target: b_audiobutton};
    if (a && a.getDuration) {
        b_audiobutton.currentTime = c_audiobutton.currentTime = a.getCurrentTime();
        b_audiobutton.duration = c_audiobutton.duration = a.getDuration();
        c_audiobutton.paused = b_audiobutton.paused;
        c_audiobutton.ended = b_audiobutton.ended;
        c_audiobutton.muted = a.isMuted();
        c_audiobutton.volume = a.getVolume() / 100;
        c_audiobutton.bytesTotal = a.getVideoBytesTotal();
        c_audiobutton.bufferedBytes = a.getVideoBytesLoaded();
        var daudiobutton = c_audiobutton.bufferedBytes / c_audiobutton.bytesTotal * c_audiobutton.duration;
        c_audiobutton.target.buffered = c_audiobutton.buffered = {start: function () {
            return 0
        }, end: function () {
            return daudiobutton
        }, length: 1}
    }
    b_audiobutton.dispatchEvent(c_audiobutton.type, c_audiobutton)
}, iFrameReady: function () {
    for (this.isIframeLoaded = this.isLoaded = true; this.iframeQueue.length > 0;)this.createIframe(this.iframeQueue.pop())
}, flashPlayers: {}, createFlash: function (a) {
    this.flashPlayers[a.pluginId] =
        a;
    var b_audiobutton, c_audiobutton = "//www.youtube.com/apiplayer?enablejsapi=1&amp;playerapiid=" + a.pluginId + "&amp;version=3&amp;autoplay=0&amp;controls=0&amp;modestbranding=1&loop=0";
    if (mejsaudiobutton.MediaFeatures_audiobutton.isIE) {
        b_audiobutton = document.createElement("div");
        a.container.appendChild(b_audiobutton);
        b_audiobutton.outerHTML = '<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="//download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab" id="' + a.pluginId + '" width="' + a.width + '" height="' + a.height + '" class="mejs-shim"><param name="movie" value="' +
            c_audiobutton + '" /><param name="wmode" value="transparent" /><param name="allowScriptAccess" value="always" /><param name="allowFullScreen" value="true" /></object>'
    } else a.container.innerHTML = '<object type="application/x-shockwave-flash" id="' + a.pluginId + '" data="' + c_audiobutton + '" width="' + a.width + '" height="' + a.height + '" style="visibility: visible; " class="mejs-shim"><param name="allowScriptAccess" value="always"><param name="wmode" value="transparent"></object>'
}, flashReady: function (a) {
    var b_audiobutton = this.flashPlayers[a], c_audiobutton =
        document.getElementById(a), daudiobutton = b_audiobutton.pluginMediaElement;
    daudiobutton.pluginApi = daudiobutton.pluginElement = c_audiobutton;
    mejsaudiobutton.MediaPluginBridge.initPlugin(a);
    c_audiobutton.cueVideoById(b_audiobutton.videoId);
    a = b_audiobutton.containerId + "_callback";
    window[a] = function (e) {
        mejsaudiobutton.YouTubeApi.handleStateChange(e, c_audiobutton, daudiobutton)
    };
    c_audiobutton.addEventListener("onStateChange", a);
    setInterval(function () {
        mejsaudiobutton.YouTubeApi.createEvent(c_audiobutton, daudiobutton, "timeupdate")
    }, 250)
}, handleStateChange: function (a, b_audiobutton, c_audiobutton) {
    switch (a) {
        case -1:
            c_audiobutton.paused = true;
            c_audiobutton.ended = true;
            mejsaudiobutton.YouTubeApi.createEvent(b_audiobutton, c_audiobutton, "loadedmetadata");
            break;
        case 0:
            c_audiobutton.paused = false;
            c_audiobutton.ended = true;
            mejsaudiobutton.YouTubeApi.createEvent(b_audiobutton, c_audiobutton, "ended");
            break;
        case 1:
            c_audiobutton.paused = false;
            c_audiobutton.ended = false;
            mejsaudiobutton.YouTubeApi.createEvent(b_audiobutton, c_audiobutton, "play");
            mejsaudiobutton.YouTubeApi.createEvent(b_audiobutton, c_audiobutton, "playing");
            break;
        case 2:
            c_audiobutton.paused = true;
            c_audiobutton.ended = false;
            mejsaudiobutton.YouTubeApi.createEvent(b_audiobutton, c_audiobutton, "pause");
            break;
        case 3:
            mejsaudiobutton.YouTubeApi.createEvent(b_audiobutton, c_audiobutton, "progress")
    }
}};
function onYouTubePlayerAPIReady() {
    mejsaudiobutton.YouTubeApi.iFrameReady()
}
function onYouTubePlayerReady(a) {
    mejsaudiobutton.YouTubeApi.flashReady(a)
}
window.mejsaudiobutton = mejsaudiobutton;
window.MediaElementAudioButton = mejsaudiobutton.MediaElementAudioButton;
(function (a, b_audiobutton) {
    var c_audiobutton = {locale: {language: "", strings: {}}, methods: {}};
    c_audiobutton.getLanguage = function () {
        return(c_audiobutton.locale.language || window.navigator.userLanguage || window.navigator.language).substr(0, 2).toLowerCase()
    };
    if (typeof mejsL10n != "undefined")c_audiobutton.locale.language = mejsL10n.language;
    c_audiobutton.methods.checkPlain = function (daudiobutton) {
        var e, g, f = {"&": "&amp;", '"': "&quot;", "<": "&lt;", ">": "&gt;"};
        daudiobutton = String(daudiobutton);
        for (e in f)if (f.hasOwnProperty(e)) {
            g = RegExp(e, "g");
            daudiobutton = daudiobutton.replace(g, f[e])
        }
        return daudiobutton
    };
    c_audiobutton.methods.t = function (daudiobutton, e) {
        if (c_audiobutton.locale.strings &&
            c_audiobutton.locale.strings[e.context] && c_audiobutton.locale.strings[e.context][daudiobutton])daudiobutton = c_audiobutton.locale.strings[e.context][daudiobutton];
        return c_audiobutton.methods.checkPlain(daudiobutton)
    };
    c_audiobutton.t = function (daudiobutton, e) {
        if (typeof daudiobutton === "string" && daudiobutton.length > 0) {
            var g = c_audiobutton.getLanguage();
            e = e || {context: g};
            return c_audiobutton.methods.t(daudiobutton, e)
        } else throw{name: "InvalidArgumentException", message: "First argument is either not a string or empty."};
    };
    b_audiobutton.i18n = c_audiobutton
})(document, mejsaudiobutton);
(function (a) {
    if (typeof mejsL10n != "undefined")a[mejsL10n.language] = mejsL10n.strings
})(mejsaudiobutton.i18n.locale.strings);
(function (a) {
    if (typeof a.de === "undefined")a.de = {Fullscreen: "Vollbild", "Go Fullscreen": "Vollbild an", "Turn off Fullscreen": "Vollbild aus", Close: "Schlie\u00dfen"}
})(mejsaudiobutton.i18n.locale.strings);
(function (a) {
    if (typeof a.zh === "undefined")a.zh = {Fullscreen: "\u5168\u87a2\u5e55", "Go Fullscreen": "\u5168\u5c4f\u6a21\u5f0f", "Turn off Fullscreen": "\u9000\u51fa\u5168\u5c4f\u6a21\u5f0f", Close: "\u95dc\u9589"}
})(mejsaudiobutton.i18n.locale.strings);

/*!
 * AudioButtonPlayer
 * http://mediaelementjs.com/
 *
 * Creates a controller bar for HTML5 <video> add <audio> tags
 * using jQuery and MediaElementAudioButton.js (HTML5 Flash/Silverlight wrapper)
 *
 * Copyright 2010-2013, John Dyer (http://j.hn/)
 * License: MIT
 *
 */
if (typeof jQuery != "undefined")mejsaudiobutton.$ = jQuery; else if (typeof ender != "undefined")mejsaudiobutton.$ = ender;
(function (f) {
    mejsaudiobutton.MepDefaults = {poster: "", showPosterWhenEnded: false, defaultVideoWidth: 480, defaultVideoHeight: 270, videoWidth: -1, videoHeight: -1, defaultAudioWidth: 400, defaultAudioHeight: 30, defaultSeekBackwardInterval: function (a) {
        return a.duration * 0.05
    }, defaultSeekForwardInterval: function (a) {
        return a.duration * 0.05
    }, audioWidth: -1, audioHeight: -1, startVolume: 0.8, loop: false, autoRewind: true, enableAutosize: true, alwaysShowHours: false, showTimecodeFrameCount: false, framesPerSecond: 25, autosizeProgress: true, alwaysShowControls: false,
        hideVideoControlsOnLoad: false, clickToPlayPause: true, iPadUseNativeControls: false, iPhoneUseNativeControls: false, AndroidUseNativeControls: false, features: ["playpause", "current", "progress", "duration", "tracks", "volume", "fullscreen"], isVideo: true, enableKeyboard: true, pauseOtherPlayers: true, keyActions: [
            {keys: [32, 179], action: function (a, b_audiobutton) {
                b_audiobutton.paused || b_audiobutton.ended ? a.play() : a.pause()
            }},
            {keys: [38], action: function (a, b_audiobutton) {
                b_audiobutton.setVolume(Math.min(b_audiobutton.volume + 0.1, 1))
            }},
            {keys: [40], action: function (a, b_audiobutton) {
                b_audiobutton.setVolume(Math.max(b_audiobutton.volume -
                    0.1, 0))
            }},
            {keys: [37, 227], action: function (a, b_audiobutton) {
                if (!isNaN(b_audiobutton.duration) && b_audiobutton.duration > 0) {
                    if (a.isVideo) {
                        a.showControls();
                        a.startControlsTimer()
                    }
                    var c_audiobutton = Math.max(b_audiobutton.currentTime - a.options.defaultSeekBackwardInterval(b_audiobutton), 0);
                    b_audiobutton.setCurrentTime(c_audiobutton)
                }
            }},
            {keys: [39, 228], action: function (a, b_audiobutton) {
                if (!isNaN(b_audiobutton.duration) && b_audiobutton.duration > 0) {
                    if (a.isVideo) {
                        a.showControls();
                        a.startControlsTimer()
                    }
                    var c_audiobutton = Math.min(b_audiobutton.currentTime + a.options.defaultSeekForwardInterval(b_audiobutton), b_audiobutton.duration);
                    b_audiobutton.setCurrentTime(c_audiobutton)
                }
            }},
            {keys: [70], action: function (a) {
                if (typeof a.enterFullScreen !=
                    "undefined")a.isFullScreen ? a.exitFullScreen() : a.enterFullScreen()
            }}
        ]};
    mejsaudiobutton.mepIndex = 0;
    mejsaudiobutton.players = {};
    mejsaudiobutton.AudioButtonPlayer = function (a, b_audiobutton) {
        if (!(this instanceof mejsaudiobutton.AudioButtonPlayer))return new mejsaudiobutton.AudioButtonPlayer(a, b_audiobutton);
        this.$media = this.$node = f(a);
        this.node = this.media = this.$media[0];
        if (typeof this.node.player != "undefined")return this.node.player; else this.node.player = this;
        if (typeof b_audiobutton == "undefined")b_audiobutton = this.$node.data("mejsoptions");
        this.options = f.extend({}, mejsaudiobutton.MepDefaults, b_audiobutton);
        this.id = "mep_" + mejsaudiobutton.mepIndex++;
        mejsaudiobutton.players[this.id] = this;
        this.init();
        return this
    };
    mejsaudiobutton.AudioButtonPlayer.prototype = {hasFocus: false, controlsAreVisible: true, init: function () {
        var a = this, b_audiobutton = mejsaudiobutton.MediaFeatures_audiobutton, c_audiobutton = f.extend(true, {}, a.options, {success: function (daudiobutton, g) {
            a.meReady(daudiobutton, g)
        }, error: function (daudiobutton) {
            a.handleError(daudiobutton)
        }}), e = a.media.tagName.toLowerCase();
        a.isDynamic = e !== "audio" && e !== "video";
        a.isVideo = a.isDynamic ? a.options.isVideo : e !== "audio" && a.options.isVideo;
        if (b_audiobutton.isiPad && a.options.iPadUseNativeControls || b_audiobutton.isiPhone && a.options.iPhoneUseNativeControls) {
            a.$media.attr("controls",
                "controls");
            b_audiobutton.isiPad && a.media.getAttribute("autoplay") !== null && a.play()
        } else if (!(b_audiobutton.isAndroid && a.options.AndroidUseNativeControls)) {
            a.$media.removeAttr("controls");
            a.container = f('<div id="' + a.id + '" class="mejs-container-audiobutton ' + (mejsaudiobutton.MediaFeatures_audiobutton.svg ? "svg" : "no-svg") + '">' +
                '<div class="mejs-inner-audiobutton"><div class="mejs-mediaelement-audiobutton"></div><div class="mejs-layers"></div><div class="mejs-controls-audiobutton"></div><div class="mejs-clear"></div></div></div>').addClass(a.$media[0].className).insertBefore(a.$media);
            a.container.addClass((b_audiobutton.isAndroid ?
                "mejs-android " : "") + (b_audiobutton.isiOS ? "mejs-ios " : "") + (b_audiobutton.isiPad ? "mejs-ipad " : "") + (b_audiobutton.isiPhone ? "mejs-iphone " : "") + (a.isVideo ? "mejs-video " : "mejs-audio-audiobutton "));
            if (b_audiobutton.isiOS) {
                b_audiobutton = a.$media.clone();
                a.container.find(".mejs-mediaelement-audiobutton").append(b_audiobutton);
                a.$media.remove();
                a.$node = a.$media = b_audiobutton;
                a.node = a.media = b_audiobutton[0]
            } else a.container.find(".mejs-mediaelement-audiobutton").append(a.$media);
            a.controls = a.container.find(".mejs-controls-audiobutton");
            a.layers = a.container.find(".mejs-layers");
            b_audiobutton = a.isVideo ? "video" : "audio";
            e = b_audiobutton.substring(0, 1).toUpperCase() + b_audiobutton.substring(1);
            a.width = a.options[b_audiobutton + "Width"] > 0 || a.options[b_audiobutton + "Width"].toString().indexOf("%") > -1 ? a.options[b_audiobutton + "Width"] : a.media.style.width !== "" && a.media.style.width !== null ? a.media.style.width : a.media.getAttribute("width") !== null ? a.$media.attr("width") : a.options["default" + e + "Width"];
            a.height = a.options[b_audiobutton + "Height"] > 0 || a.options[b_audiobutton + "Height"].toString().indexOf("%") > -1 ? a.options[b_audiobutton + "Height"] : a.media.style.height !== "" && a.media.style.height !== null ? a.media.style.height : a.$media[0].getAttribute("height") !== null ? a.$media.attr("height") :
                a.options["default" + e + "Height"];
            a.setPlayerSize(a.width, a.height);
            c_audiobutton.pluginWidth = a.width;
            c_audiobutton.pluginHeight = a.height
        }
        mejsaudiobutton.MediaElementAudioButton(a.$media[0], c_audiobutton);
        typeof a.container != "undefined" && a.controlsAreVisible && a.container.trigger("controlsshown")
    }, showControls: function (a) {
        var b_audiobutton = this;
        a = typeof a == "undefined" || a;
        if (!b_audiobutton.controlsAreVisible) {
            if (a) {
                b_audiobutton.controls.css("visibility", "visible").stop(true, true).fadeIn(200, function () {
                    b_audiobutton.controlsAreVisible = true;
                    b_audiobutton.container.trigger("controlsshown")
                });
                b_audiobutton.container.find(".mejs-control").css("visibility",
                        "visible").stop(true, true).fadeIn(200, function () {
                        b_audiobutton.controlsAreVisible = true
                    })
            } else {
                b_audiobutton.controls.css("visibility", "visible").css("display", "block");
                b_audiobutton.container.find(".mejs-control").css("visibility", "visible").css("display", "block");
                b_audiobutton.controlsAreVisible = true;
                b_audiobutton.container.trigger("controlsshown")
            }
            b_audiobutton.setControlsSize()
        }
    }, hideControls: function (a) {
        var b_audiobutton = this;
        a = typeof a == "undefined" || a;
        if (!(!b_audiobutton.controlsAreVisible || b_audiobutton.options.alwaysShowControls))if (a) {
            b_audiobutton.controls.stop(true, true).fadeOut(200, function () {
                f(this).css("visibility",
                    "hidden").css("display", "block");
                b_audiobutton.controlsAreVisible = false;
                b_audiobutton.container.trigger("controlshidden")
            });
            b_audiobutton.container.find(".mejs-control").stop(true, true).fadeOut(200, function () {
                f(this).css("visibility", "hidden").css("display", "block")
            })
        } else {
            b_audiobutton.controls.css("visibility", "hidden").css("display", "block");
            b_audiobutton.container.find(".mejs-control").css("visibility", "hidden").css("display", "block");
            b_audiobutton.controlsAreVisible = false;
            b_audiobutton.container.trigger("controlshidden")
        }
    }, controlsTimer: null, startControlsTimer: function (a) {
        var b_audiobutton =
            this;
        a = typeof a != "undefined" ? a : 1500;
        b_audiobutton.killControlsTimer("start");
        b_audiobutton.controlsTimer = setTimeout(function () {
            b_audiobutton.hideControls();
            b_audiobutton.killControlsTimer("hide")
        }, a)
    }, killControlsTimer: function () {
        if (this.controlsTimer !== null) {
            clearTimeout(this.controlsTimer);
            delete this.controlsTimer;
            this.controlsTimer = null
        }
    }, controlsEnabled: true, disableControls: function () {
        this.killControlsTimer();
        this.hideControls(false);
        this.controlsEnabled = false
    }, enableControls: function () {
        this.showControls(false);
        this.controlsEnabled = true
    },
        meReady: function (a, b_audiobutton) {
            var c_audiobutton = this, e = mejsaudiobutton.MediaFeatures_audiobutton, daudiobutton = b_audiobutton.getAttribute("autoplay");
            daudiobutton = !(typeof daudiobutton == "undefined" || daudiobutton === null || daudiobutton === "false");
            var g;
            if (!c_audiobutton.created) {
                c_audiobutton.created = true;
                c_audiobutton.media = a;
                c_audiobutton.domNode = b_audiobutton;
                if (!(e.isAndroid && c_audiobutton.options.AndroidUseNativeControls) && !(e.isiPad && c_audiobutton.options.iPadUseNativeControls) && !(e.isiPhone && c_audiobutton.options.iPhoneUseNativeControls)) {
                    c_audiobutton.buildposter(c_audiobutton, c_audiobutton.controls, c_audiobutton.layers, c_audiobutton.media);
                    c_audiobutton.buildkeyboard(c_audiobutton, c_audiobutton.controls, c_audiobutton.layers, c_audiobutton.media);
                    c_audiobutton.buildoverlays(c_audiobutton, c_audiobutton.controls, c_audiobutton.layers, c_audiobutton.media);
                    c_audiobutton.findTracks();
                    for (g in c_audiobutton.options.features) {
                        e =
                            c_audiobutton.options.features[g];
                        if (c_audiobutton["build" + e])try {
                            c_audiobutton["build" + e](c_audiobutton, c_audiobutton.controls, c_audiobutton.layers, c_audiobutton.media)
                        } catch (k) {
                        }
                    }
                    c_audiobutton.container.trigger("controlsready");
                    c_audiobutton.setPlayerSize(c_audiobutton.width, c_audiobutton.height);
                    c_audiobutton.setControlsSize();
                    if (c_audiobutton.isVideo) {
                        if (mejsaudiobutton.MediaFeatures_audiobutton.hasTouch)c_audiobutton.$media.bind("touchstart", function () {
                            if (c_audiobutton.controlsAreVisible)c_audiobutton.hideControls(false); else c_audiobutton.controlsEnabled && c_audiobutton.showControls(false)
                        }); else {
                            mejsaudiobutton.AudioButtonPlayer.prototype.clickToPlayPauseCallback = function () {
                                if (c_audiobutton.options.clickToPlayPause)c_audiobutton.media.paused ? c_audiobutton.play() : c_audiobutton.pause()
                            };
                            c_audiobutton.media.addEventListener("click", c_audiobutton.clickToPlayPauseCallback, false);
                            c_audiobutton.container.bind("mouseenter mouseover",function () {
                                if (c_audiobutton.controlsEnabled)if (!c_audiobutton.options.alwaysShowControls) {
                                    c_audiobutton.killControlsTimer("enter");
                                    c_audiobutton.showControls();
                                    c_audiobutton.startControlsTimer(2500)
                                }
                            }).bind("mousemove",function () {
                                if (c_audiobutton.controlsEnabled) {
                                    c_audiobutton.controlsAreVisible || c_audiobutton.showControls();
                                    c_audiobutton.options.alwaysShowControls || c_audiobutton.startControlsTimer(2500)
                                }
                            }).bind("mouseleave", function () {
                                c_audiobutton.controlsEnabled && !c_audiobutton.media.paused && !c_audiobutton.options.alwaysShowControls && c_audiobutton.startControlsTimer(1E3)
                            })
                        }
                        c_audiobutton.options.hideVideoControlsOnLoad &&
                        c_audiobutton.hideControls(false);
                        daudiobutton && !c_audiobutton.options.alwaysShowControls && c_audiobutton.hideControls();
                        c_audiobutton.options.enableAutosize && c_audiobutton.media.addEventListener("loadedmetadata", function (j) {
                            if (c_audiobutton.options.videoHeight <= 0 && c_audiobutton.domNode.getAttribute("height") === null && !isNaN(j.target.videoHeight)) {
                                c_audiobutton.setPlayerSize(j.target.videoWidth, j.target.videoHeight);
                                c_audiobutton.setControlsSize();
                                c_audiobutton.media.setVideoSize(j.target.videoWidth, j.target.videoHeight)
                            }
                        }, false)
                    }
                    a.addEventListener("play", function () {
                        for (var j in mejsaudiobutton.players) {
                            var m = mejsaudiobutton.players[j];
                            m.id != c_audiobutton.id &&
                                c_audiobutton.options.pauseOtherPlayers && !m.paused && !m.ended && m.pause();
                            m.hasFocus = false
                        }
                        c_audiobutton.hasFocus = true
                    }, false);
                    c_audiobutton.media.addEventListener("ended", function () {
                        if (c_audiobutton.options.autoRewind)try {
                            c_audiobutton.media.setCurrentTime(0)
                        } catch (j) {
                        }
                        c_audiobutton.media.pause();
                        c_audiobutton.setProgressRail && c_audiobutton.setProgressRail();
                        c_audiobutton.setCurrentRail && c_audiobutton.setCurrentRail();
                        if (c_audiobutton.options.loop)c_audiobutton.play(); else!c_audiobutton.options.alwaysShowControls && c_audiobutton.controlsEnabled && c_audiobutton.showControls()
                    }, false);
                    c_audiobutton.media.addEventListener("loadedmetadata", function () {
                        c_audiobutton.updateDuration && c_audiobutton.updateDuration();
                        c_audiobutton.updateCurrent &&
                        c_audiobutton.updateCurrent();
                        if (!c_audiobutton.isFullScreen) {
                            c_audiobutton.setPlayerSize(c_audiobutton.width, c_audiobutton.height);
                            c_audiobutton.setControlsSize()
                        }
                    }, false);
                    setTimeout(function () {
                        c_audiobutton.setPlayerSize(c_audiobutton.width, c_audiobutton.height);
                        c_audiobutton.setControlsSize()
                    }, 50);
                    c_audiobutton.globalBind("resize", function () {
                        c_audiobutton.isFullScreen || mejsaudiobutton.MediaFeatures_audiobutton.hasTrueNativeFullScreen && document.webkitIsFullScreen || c_audiobutton.setPlayerSize(c_audiobutton.width, c_audiobutton.height);
                        c_audiobutton.setControlsSize()
                    });
                    c_audiobutton.media.pluginType == "youtube" && c_audiobutton.container.find(".mejs-overlay-play").hide()
                }
                daudiobutton && a.pluginType == "native" && c_audiobutton.play();
                if (c_audiobutton.options.success)typeof c_audiobutton.options.success ==
                    "string" ? window[c_audiobutton.options.success](c_audiobutton.media, c_audiobutton.domNode, c_audiobutton) : c_audiobutton.options.success(c_audiobutton.media, c_audiobutton.domNode, c_audiobutton)
            }
        }, handleError: function (a) {
            this.controls.hide();
            this.options.error && this.options.error(a)
        }, setPlayerSize: function (a, b_audiobutton) {
            if (typeof a != "undefined")this.width = a;
            if (typeof b_audiobutton != "undefined")this.height = b_audiobutton;
            if (this.height.toString().indexOf("%") > 0 || this.$node.css("max-width") === "100%" || parseInt(this.$node.css("max-width").replace(/px/, ""), 10) / this.$node.offsetParent().width() === 1 || this.$node[0].currentStyle && this.$node[0].currentStyle.maxWidth ===
                "100%") {
                var c_audiobutton = this.isVideo ? this.media.videoWidth && this.media.videoWidth > 0 ? this.media.videoWidth : this.options.defaultVideoWidth : this.options.defaultAudioWidth, e = this.isVideo ? this.media.videoHeight && this.media.videoHeight > 0 ? this.media.videoHeight : this.options.defaultVideoHeight : this.options.defaultAudioHeight, daudiobutton = this.container.parent().closest(":visible").width();
                c_audiobutton = this.isVideo || !this.options.autosizeProgress ? parseInt(daudiobutton * e / c_audiobutton, 10) : e;
                if (this.container.parent()[0].tagName.toLowerCase() === "body") {
                    daudiobutton = f(window).width();
                    c_audiobutton = f(window).height()
                }
                if (c_audiobutton != 0 && daudiobutton != 0) {
                    this.container.width(daudiobutton).height(c_audiobutton);
                    this.$media.add(this.container.find(".mejs-shim")).width("100%").height("100%");
                    this.isVideo && this.media.setVideoSize && this.media.setVideoSize(daudiobutton, c_audiobutton);
                    this.layers.children(".mejs-layer").width("100%").height("100%")
                }
            } else {
                this.container.width(this.width).height(this.height);
                this.layers.children(".mejs-layer").width(this.width).height(this.height)
            }
            daudiobutton = this.layers.find(".mejs-overlay-play");
            c_audiobutton = daudiobutton.find(".mejs-overlay-button");
            daudiobutton.height(this.container.height() -
                this.controls.height());
            c_audiobutton.css("margin-top", "-" + (c_audiobutton.height() / 2 - this.controls.height() / 2).toString() + "px")
        }, setControlsSize: function () {
            var a = 0, b_audiobutton = 0, c_audiobutton = this.controls.find(".mejs-time_audiobutton-rail-audiobutton"), e = this.controls.find(".mejs-time_audiobutton-total");
            this.controls.find(".mejs-time_audiobutton-current");
            this.controls.find(".mejs-time_audiobutton-loaded");
            var daudiobutton = c_audiobutton.siblings();
            if (this.options && !this.options.autosizeProgress)b_audiobutton = parseInt(c_audiobutton.css("width"));
            if (b_audiobutton === 0 || !b_audiobutton) {
                daudiobutton.each(function () {
                    var g = f(this);
                    if (g.css("position") != "absolute" && g.is(":visible"))a += f(this).outerWidth(true)
                });
                b_audiobutton = this.controls.width() - a - (c_audiobutton.outerWidth(true) - c_audiobutton.width())
            }
            c_audiobutton.width(b_audiobutton);
            e.width(b_audiobutton - (e.outerWidth(true) - e.width()));
            this.setProgressRail && this.setProgressRail();
            this.setCurrentRail && this.setCurrentRail()
        }, buildposter: function (a, b_audiobutton, c_audiobutton, e) {
            var daudiobutton = f('<div class="mejs-poster mejs-layer"></div>').appendTo(c_audiobutton);
            b_audiobutton = a.$media.attr("poster");
            if (a.options.poster !== "")b_audiobutton = a.options.poster;
            b_audiobutton !== "" && b_audiobutton != null ? this.setPoster(b_audiobutton) : daudiobutton.hide();
            e.addEventListener("play", function () {
                daudiobutton.hide()
            }, false);
            a.options.showPosterWhenEnded && a.options.autoRewind &&
            e.addEventListener("ended", function () {
                daudiobutton.show()
            }, false)
        }, setPoster: function (a) {
            var b_audiobutton = this.container.find(".mejs-poster"), c_audiobutton = b_audiobutton.find("img");
            if (c_audiobutton.length == 0)c_audiobutton = f('<img width="100%" height="100%" />').appendTo(b_audiobutton);
            c_audiobutton.attr("src", a);
            b_audiobutton.css({"background-image": "url(" + a + ")"})
        }, buildoverlays: function (a, b_audiobutton, c_audiobutton, e) {
            var daudiobutton = this;
            if (a.isVideo) {
                var g = f('<div class="mejs-overlay mejs-layer"><div class="mejs-overlay-loading"><span></span></div></div>').hide().appendTo(c_audiobutton), k = f('<div class="mejs-overlay mejs-layer"><div class="mejs-overlay-error"></div></div>').hide().appendTo(c_audiobutton),
                    j = f('<div class="mejs-overlay mejs-layer mejs-overlay-play"><div class="mejs-overlay-button"></div></div>').appendTo(c_audiobutton).bind("click touchstart", function () {
                        daudiobutton.options.clickToPlayPause && e.paused && daudiobutton.play()
                    });
                e.addEventListener("play", function () {
                    j.hide();
                    g.hide();
                    b_audiobutton.find(".mejs-time_audiobutton-buffering").hide();
                    k.hide()
                }, false);
                e.addEventListener("playing", function () {
                    j.hide();
                    g.hide();
                    b_audiobutton.find(".mejs-time_audiobutton-buffering").hide();
                    k.hide()
                }, false);
                e.addEventListener("seeking", function () {
                        g.show();
                        b_audiobutton.find(".mejs-time_audiobutton-buffering").show()
                    },
                    false);
                e.addEventListener("seeked", function () {
                    g.hide();
                    b_audiobutton.find(".mejs-time_audiobutton-buffering").hide()
                }, false);
                e.addEventListener("pause", function () {
                    mejsaudiobutton.MediaFeatures_audiobutton.isiPhone || j.show()
                }, false);
                e.addEventListener("waiting", function () {
                    g.show();
                    b_audiobutton.find(".mejs-time_audiobutton-buffering").show()
                }, false);
                e.addEventListener("loadeddata", function () {
                    g.show();
                    b_audiobutton.find(".mejs-time_audiobutton-buffering").show()
                }, false);
                e.addEventListener("canplay", function () {
                    g.hide();
                    b_audiobutton.find(".mejs-time_audiobutton-buffering").hide()
                }, false);
                e.addEventListener("error", function () {
                    g.hide();
                    b_audiobutton.find(".mejs-time_audiobutton-buffering").hide();
                    k.show();
                    k.find("mejs-overlay-error").html("Error loading this resource")
                }, false)
            }
        }, buildkeyboard: function (a, b_audiobutton, c_audiobutton, e) {
            this.globalBind("keydown", function (daudiobutton) {
                if (a.hasFocus && a.options.enableKeyboard)for (var g = 0, k = a.options.keyActions.length; g < k; g++)for (var j = a.options.keyActions[g], m = 0, q = j.keys.length; m < q; m++)if (daudiobutton.keyCode == j.keys[m]) {
                    daudiobutton.preventDefault();
                    j.action(a, e, daudiobutton.keyCode);
                    return false
                }
                return true
            });
            this.globalBind("click", function (daudiobutton) {
                if (f(daudiobutton.target).closest(".mejs-container-audiobutton").length ==
                    0)a.hasFocus = false
            })
        }, findTracks: function () {
            var a = this, b_audiobutton = a.$media.find("track");
            a.tracks = [];
            b_audiobutton.each(function (c_audiobutton, e) {
                e = f(e);
                a.tracks.push({srclang: e.attr("srclang") ? e.attr("srclang").toLowerCase() : "", src: e.attr("src"), kind: e.attr("kind"), label: e.attr("label") || "", entries: [], isLoaded: false})
            })
        }, changeSkin: function (a) {
            this.container[0].className = "mejs-container-audiobutton " + a;
            this.setPlayerSize(this.width, this.height);
            this.setControlsSize()
        }, play: function () {
            this.load();
            this.media.play()
        }, pause: function () {
            try {
                this.media.pause()
            } catch (a) {
            }
        },
        load: function () {
            this.isLoaded || this.media.load();
            this.isLoaded = true
        }, setMuted: function (a) {
            this.media.setMuted(a)
        }, setCurrentTime: function (a) {
            this.media.setCurrentTime(a)
        }, getCurrentTime: function () {
            return this.media.currentTime
        }, setVolume: function (a) {
            this.media.setVolume(a)
        }, getVolume: function () {
            return this.media.volume
        }, setSrc: function (a) {
            this.media.setSrc(a)
        }, remove: function () {
            var a, b_audiobutton;
            for (a in this.options.features) {
                b_audiobutton = this.options.features[a];
                if (this["clean" + b_audiobutton])try {
                    this["clean" + b_audiobutton](this)
                } catch (c_audiobutton) {
                }
            }
            if (this.isDynamic)this.$node.insertBefore(this.container);
            else {
                this.$media.prop("controls", true);
                this.$node.clone().show().insertBefore(this.container);
                this.$node.remove()
            }
            this.media.pluginType !== "native" && this.media.remove();
            delete mejsaudiobutton.players[this.id];
            this.container.remove();
            this.globalUnbind();
            delete this.node.player
        }};
    (function () {
        function a(c_audiobutton, e) {
            var daudiobutton = {daudiobutton: [], w: []};
            f.each((c_audiobutton || "").split(" "), function (g, k) {
                var j = k + "." + e;
                if (j.indexOf(".") === 0) {
                    daudiobutton.daudiobutton.push(j);
                    daudiobutton.w.push(j)
                } else daudiobutton[b_audiobutton.test(k) ? "w" : "daudiobutton"].push(j)
            });
            daudiobutton.daudiobutton = daudiobutton.daudiobutton.join(" ");
            daudiobutton.w = daudiobutton.w.join(" ");
            return daudiobutton
        }

        var b_audiobutton =
            /^((after|before)print|(before)?unload|hashchange|message|o(ff|naudiobutton)line|page(hide|show)|popstate|resize|storage)\b_audiobutton/;
        mejsaudiobutton.AudioButtonPlayer.prototype.globalBind = function (c_audiobutton, e, daudiobutton) {
            c_audiobutton = a(c_audiobutton, this.id);
            c_audiobutton.daudiobutton && f(document).bind(c_audiobutton.daudiobutton, e, daudiobutton);
            c_audiobutton.w && f(window).bind(c_audiobutton.w, e, daudiobutton)
        };
        mejsaudiobutton.AudioButtonPlayer.prototype.globalUnbind = function (c_audiobutton, e) {
            c_audiobutton = a(c_audiobutton, this.id);
            c_audiobutton.daudiobutton && f(document).unbind(c_audiobutton.daudiobutton, e);
            c_audiobutton.w && f(window).unbind(c_audiobutton.w, e)
        }
    })();
    if (typeof jQuery != "undefined")jQuery.fn.mediaelement_audiobutton = function (a) {
        a === false ? this.each(function () {
            var b_audiobutton = jQuery(this).data("mediaelement_audiobutton");
            b_audiobutton && b_audiobutton.remove();
            jQuery(this).removeData("mediaelement_audiobutton")
        }) : this.each(function () {
            jQuery(this).data("mediaelement_audiobutton", new mejsaudiobutton.AudioButtonPlayer(this, a))
        });
        return this
    };
    f(document).ready(function () {
        f(".mejs-player").mediaelement_audiobutton()
    });
    window.AudioButtonPlayer = mejsaudiobutton.AudioButtonPlayer
})(mejsaudiobutton.$);
(function (f) {
    f.extend(mejsaudiobutton.MepDefaults, {playpauseText: mejsaudiobutton.i18n.t("Play/Pause")});
    f.extend(AudioButtonPlayer.prototype, {buildplaypause: function (a, b_audiobutton, c_audiobutton, e) {
        var daudiobutton = f('<div class="mejs-button mejs-playpause-button mejs-play" style="margin-left: 39%;width: 20%"><img style="cursor: pointer" src="../../../course/en/images/image1.png" type="button" aria-controls="' + this.id + '" title="' + this.options.playpauseText + '" aria-label="' + this.options.playpauseText + '"></div>').appendTo(b_audiobutton).click(function (g) {
            g.preventDefault();
            e.paused ? e.play() : e.pause();
            return false
        });
        e.addEventListener("play", function () {
                daudiobutton.removeClass("mejs-play").addClass("mejs-pause")
            },
            false);
        e.addEventListener("playing", function () {
            daudiobutton.removeClass("mejs-play").addClass("mejs-pause")
        }, false);
        e.addEventListener("pause", function () {
            daudiobutton.removeClass("mejs-pause").addClass("mejs-play")
        }, false);
        e.addEventListener("paused", function () {
            daudiobutton.removeClass("mejs-pause").addClass("mejs-play")
        }, false)
    }})
})(mejsaudiobutton.$);
(function (f) {
    f.extend(mejsaudiobutton.MepDefaults, {stopText: "Stop"});
    f.extend(AudioButtonPlayer.prototype, {buildstop: function (a, b_audiobutton, c_audiobutton, e) {
        f('<div class="mejs-button mejs-stop-button mejs-stop"><button type="button" aria-controls="' + this.id + '" title="' + this.options.stopText + '" aria-label="' + this.options.stopText + '"></button></div>').appendTo(b_audiobutton).click(function () {
            e.paused || e.pause();
            if (e.currentTime > 0) {
                e.setCurrentTime(0);
                e.pause();
                b_audiobutton.find(".mejs-time_audiobutton-current").width("0px");
                b_audiobutton.find(".mejs-time_audiobutton-handle").css("left",
                    "0px");
                b_audiobutton.find(".mejs-time_audiobutton-float-current").html(mejsaudiobutton.Utility_audiobutton.secondsToTimeCode(0));
                b_audiobutton.find(".mejs-currenttime").html(mejsaudiobutton.Utility_audiobutton.secondsToTimeCode(0));
                c_audiobutton.find(".mejs-poster").show()
            }
        })
    }})
})(mejsaudiobutton.$);
(function (f) {
    f.extend(AudioButtonPlayer.prototype, {buildprogress: function (a, b_audiobutton, c_audiobutton, e) {
        f('<div class="mejs-time_audiobutton-rail-audiobutton"><span class="mejs-time_audiobutton-total"><span class="mejs-time_audiobutton-buffering"></span><span class="mejs-time_audiobutton-loaded"></span><span class="mejs-time_audiobutton-current"></span><span class="mejs-time_audiobutton-handle"></span><span class="mejs-time_audiobutton-float"><span class="mejs-time_audiobutton-float-current">00:00</span><span class="mejs-time_audiobutton-float-corner"></span></span></span></div>').appendTo(b_audiobutton);
        b_audiobutton.find(".mejs-time_audiobutton-buffering").hide();
        var daudiobutton =
            this, g = b_audiobutton.find(".mejs-time_audiobutton-total");
        c_audiobutton = b_audiobutton.find(".mejs-time_audiobutton-loaded");
        var k = b_audiobutton.find(".mejs-time_audiobutton-current"), j = b_audiobutton.find(".mejs-time_audiobutton-handle"), m = b_audiobutton.find(".mejs-time_audiobutton-float"), q = b_audiobutton.find(".mejs-time_audiobutton-float-current"), p = function (h) {
            h = h.pageX;
            var l = g.offset(), r = g.outerWidth(true), naudiobutton = 0, o = naudiobutton = 0;
            if (e.duration) {
                if (h < l.left)h = l.left; else if (h > r + l.left)h = r + l.left;
                o = h - l.left;
                naudiobutton = o / r;
                naudiobutton = naudiobutton <= 0.02 ? 0 : naudiobutton * e.duration;
                t && naudiobutton !== e.currentTime && e.setCurrentTime(naudiobutton);
                if (!mejsaudiobutton.MediaFeatures_audiobutton.hasTouch) {
                    m.css("left", o);
                    q.html(mejsaudiobutton.Utility_audiobutton.secondsToTimeCode(naudiobutton));
                    m.show()
                }
            }
        }, t = false;
        g.bind("mousedown",function (h) {
            if (h.which === 1) {
                t = true;
                p(h);
                daudiobutton.globalBind("mousemove.dur", function (l) {
                    p(l)
                });
                daudiobutton.globalBind("mouseup.dur", function () {
                    t = false;
                    m.hide();
                    daudiobutton.globalUnbind(".dur")
                });
                return false
            }
        }).bind("mouseenter",function () {
            daudiobutton.globalBind("mousemove.dur", function (h) {
                p(h)
            });
            mejsaudiobutton.MediaFeatures_audiobutton.hasTouch || m.show()
        }).bind("mouseleave", function () {
            if (!t) {
                daudiobutton.globalUnbind(".dur");
                m.hide()
            }
        });
        e.addEventListener("progress", function (h) {
            a.setProgressRail(h);
            a.setCurrentRail(h)
        }, false);
        e.addEventListener("timeupdate", function (h) {
            a.setProgressRail(h);
            a.setCurrentRail(h)
        }, false);
        daudiobutton.loaded = c_audiobutton;
        daudiobutton.total = g;
        daudiobutton.current = k;
        daudiobutton.handle = j
    }, setProgressRail: function (a) {
        var b_audiobutton = a != undefined ? a.target : this.media, c_audiobutton = null;
        if (b_audiobutton && b_audiobutton.buffered && b_audiobutton.buffered.length > 0 && b_audiobutton.buffered.end && b_audiobutton.duration)c_audiobutton = b_audiobutton.buffered.end(0) / b_audiobutton.duration; else if (b_audiobutton && b_audiobutton.bytesTotal != undefined && b_audiobutton.bytesTotal > 0 && b_audiobutton.bufferedBytes != undefined)c_audiobutton = b_audiobutton.bufferedBytes / b_audiobutton.bytesTotal; else if (a && a.lengthComputable && a.total != 0)c_audiobutton = a.loaded / a.total;
        if (c_audiobutton !== null) {
            c_audiobutton = Math.min(1,
                Math.max(0, c_audiobutton));
            this.loaded && this.total && this.loaded.width(this.total.width() * c_audiobutton)
        }
    }, setCurrentRail: function () {
        if (this.media.currentTime != undefined && this.media.duration)if (this.total && this.handle) {
            var a = Math.round(this.total.width() * this.media.currentTime / this.media.duration), b_audiobutton = a - Math.round(this.handle.outerWidth(true) / 2);
            this.current.width(a);
            this.handle.css("left", b_audiobutton)
        }
    }})
})(mejsaudiobutton.$);
(function (f) {
    f.extend(mejsaudiobutton.MepDefaults, {duration: -1, timeAndDurationSeparator: "<span> | </span>"});
    f.extend(AudioButtonPlayer.prototype, {buildcurrent: function (a, b_audiobutton, c_audiobutton, e) {
        f('<div class="mejs-time_audiobutton"><span class="mejs-currenttime">' + (a.options.alwaysShowHours ? "00:" : "") + (a.options.showTimecodeFrameCount ? "00:00:00" : "00:00") + "</span></div>").appendTo(b_audiobutton);
        this.currenttime = this.controls.find(".mejs-currenttime");
        e.addEventListener("timeupdate", function () {
            a.updateCurrent()
        }, false)
    }, buildduration: function (a, b_audiobutton, c_audiobutton, e) {
        if (b_audiobutton.children().last().find(".mejs-currenttime").length > 0)f(this.options.timeAndDurationSeparator + '<span class="mejs-duration">' + (this.options.duration > 0 ? mejsaudiobutton.Utility_audiobutton.secondsToTimeCode(this.options.duration, this.options.alwaysShowHours || this.media.duration > 3600, this.options.showTimecodeFrameCount, this.options.framesPerSecond || 25) : (a.options.alwaysShowHours ? "00:" : "") + (a.options.showTimecodeFrameCount ? "00:00:00" : "00:00")) + "</span>").appendTo(b_audiobutton.find(".mejs-time_audiobutton")); else {
            b_audiobutton.find(".mejs-currenttime").parent().addClass("mejs-currenttime-container");
            f('<div class="mejs-time_audiobutton mejs-duration-container"><span class="mejs-duration">' + (this.options.duration > 0 ? mejsaudiobutton.Utility_audiobutton.secondsToTimeCode(this.options.duration, this.options.alwaysShowHours || this.media.duration > 3600, this.options.showTimecodeFrameCount, this.options.framesPerSecond || 25) : (a.options.alwaysShowHours ? "00:" : "") + (a.options.showTimecodeFrameCount ? "00:00:00" : "00:00")) + "</span></div>").appendTo(b_audiobutton)
        }
        this.durationD = this.controls.find(".mejs-duration");
        e.addEventListener("timeupdate", function () {
                a.updateDuration()
            },
            false)
    }, updateCurrent: function () {
        if (this.currenttime)this.currenttime.html(mejsaudiobutton.Utility_audiobutton.secondsToTimeCode(this.media.currentTime, this.options.alwaysShowHours || this.media.duration > 3600, this.options.showTimecodeFrameCount, this.options.framesPerSecond || 25))
    }, updateDuration: function () {
        this.container.toggleClass("mejs-long-video", this.media.duration > 3600);
        if (this.durationD && (this.options.duration > 0 || this.media.duration))this.durationD.html(mejsaudiobutton.Utility_audiobutton.secondsToTimeCode(this.options.duration > 0 ? this.options.duration :
            this.media.duration, this.options.alwaysShowHours, this.options.showTimecodeFrameCount, this.options.framesPerSecond || 25))
    }})
})(mejsaudiobutton.$);
(function (f) {
    f.extend(mejsaudiobutton.MepDefaults, {muteText: mejsaudiobutton.i18n.t("Mute Toggle"), hideVolumeOnTouchDevices: true, audioVolume: "horizontal", videoVolume: "vertical"});
    f.extend(AudioButtonPlayer.prototype, {buildvolume: function (a, b_audiobutton, c_audiobutton, e) {
        if (!(mejsaudiobutton.MediaFeatures_audiobutton.hasTouch && this.options.hideVolumeOnTouchDevices)) {
            var daudiobutton = this, g = daudiobutton.isVideo ? daudiobutton.options.videoVolume : daudiobutton.options.audioVolume, k = g == "horizontal" ? f('<div class="mejs-button mejs-volume-button mejs-mute"><button type="button" aria-controls="' + daudiobutton.id + '" title="' + daudiobutton.options.muteText +
                    '" aria-label="' + daudiobutton.options.muteText + '"></button></div><div class="mejs-horizontal-volume-slider"><div class="mejs-horizontal-volume-total"></div><div class="mejs-horizontal-volume-current"></div><div class="mejs-horizontal-volume-handle"></div></div>').appendTo(b_audiobutton) : f('<div class="mejs-button mejs-volume-button mejs-mute"><button type="button" aria-controls="' + daudiobutton.id + '" title="' + daudiobutton.options.muteText + '" aria-label="' + daudiobutton.options.muteText + '"></button><div class="mejs-volume-slider"><div class="mejs-volume-total"></div><div class="mejs-volume-current"></div><div class="mejs-volume-handle"></div></div></div>').appendTo(b_audiobutton),
                j = daudiobutton.container.find(".mejs-volume-slider, .mejs-horizontal-volume-slider"), m = daudiobutton.container.find(".mejs-volume-total, .mejs-horizontal-volume-total"), q = daudiobutton.container.find(".mejs-volume-current, .mejs-horizontal-volume-current"), p = daudiobutton.container.find(".mejs-volume-handle, .mejs-horizontal-volume-handle"), t = function (naudiobutton, o) {
                    if (!j.is(":visible") && typeof o == "undefined") {
                        j.show();
                        t(naudiobutton, true);
                        j.hide()
                    } else {
                        naudiobutton = Math.max(0, naudiobutton);
                        naudiobutton = Math.min(naudiobutton, 1);
                        naudiobutton == 0 ? k.removeClass("mejs-mute").addClass("mejs-unmute") : k.removeClass("mejs-unmute").addClass("mejs-mute");
                        if (g == "vertical") {
                            var s = m.height(), u = m.position(), v = s - s * naudiobutton;
                            p.css("top", Math.round(u.top + v - p.height() / 2));
                            q.height(s - v);
                            q.css("top", u.top + v)
                        } else {
                            s = m.width();
                            u = m.position();
                            s = s * naudiobutton;
                            p.css("left", Math.round(u.left + s - p.width() / 2));
                            q.width(Math.round(s))
                        }
                    }
                }, h = function (naudiobutton) {
                    var o = null, s = m.offset();
                    if (g == "vertical") {
                        o = m.height();
                        parseInt(m.css("top").replace(/px/, ""), 10);
                        o = (o - (naudiobutton.pageY - s.top)) / o;
                        if (s.top == 0 || s.left == 0)return
                    } else {
                        o = m.width();
                        o = (naudiobutton.pageX - s.left) / o
                    }
                    o = Math.max(0, o);
                    o = Math.min(o, 1);
                    t(o);
                    o == 0 ? e.setMuted(true) :
                        e.setMuted(false);
                    e.setVolume(o)
                }, l = false, r = false;
            k.hover(function () {
                j.show();
                r = true
            }, function () {
                r = false;
                !l && g == "vertical" && j.hide()
            });
            j.bind("mouseover",function () {
                r = true
            }).bind("mousedown", function (naudiobutton) {
                h(naudiobutton);
                daudiobutton.globalBind("mousemove.vol", function (o) {
                    h(o)
                });
                daudiobutton.globalBind("mouseup.vol", function () {
                    l = false;
                    daudiobutton.globalUnbind(".vol");
                    !r && g == "vertical" && j.hide()
                });
                l = true;
                return false
            });
            k.find("button").click(function () {
                e.setMuted(!e.muted)
            });
            e.addEventListener("volumechange", function () {
                if (!l)if (e.muted) {
                    t(0);
                    k.removeClass("mejs-mute").addClass("mejs-unmute")
                } else {
                    t(e.volume);
                    k.removeClass("mejs-unmute").addClass("mejs-mute")
                }
            }, false);
            if (daudiobutton.container.is(":visible")) {
                t(a.options.startVolume);
                a.options.startVolume === 0 && e.setMuted(true);
                e.pluginType === "native" && e.setVolume(a.options.startVolume)
            }
        }
    }})
})(mejsaudiobutton.$);
(function (f) {
    f.extend(mejsaudiobutton.MepDefaults, {usePluginFullScreen: true, newWindowCallback: function () {
        return""
    }, fullscreenText: mejsaudiobutton.i18n.t("Fullscreen")});
    f.extend(AudioButtonPlayer.prototype, {isFullScreen: false, isNativeFullScreen: false, isInIframe: false, buildfullscreen: function (a, b_audiobutton, c_audiobutton, e) {
        if (a.isVideo) {
            a.isInIframe = window.location != window.parent.location;
            if (mejsaudiobutton.MediaFeatures_audiobutton.hasTrueNativeFullScreen) {
                c_audiobutton = function () {
                    if (a.isFullScreen)if (mejsaudiobutton.MediaFeatures_audiobutton.isFullScreen()) {
                        a.isNativeFullScreen = true;
                        a.setControlsSize()
                    } else {
                        a.isNativeFullScreen =
                            false;
                        a.exitFullScreen()
                    }
                };
                mejsaudiobutton.MediaFeatures_audiobutton.hasMozNativeFullScreen ? a.globalBind(mejsaudiobutton.MediaFeatures_audiobutton.fullScreenEventName, c_audiobutton) : a.container.bind(mejsaudiobutton.MediaFeatures_audiobutton.fullScreenEventName, c_audiobutton)
            }
            var daudiobutton = this, g = f('<div class="mejs-button mejs-fullscreen-button"><button type="button" aria-controls="' + daudiobutton.id + '" title="' + daudiobutton.options.fullscreenText + '" aria-label="' + daudiobutton.options.fullscreenText + '"></button></div>').appendTo(b_audiobutton);
            if (daudiobutton.media.pluginType === "native" || !daudiobutton.options.usePluginFullScreen && !mejsaudiobutton.MediaFeatures_audiobutton.isFirefox)g.click(function () {
                mejsaudiobutton.MediaFeatures_audiobutton.hasTrueNativeFullScreen &&
                    mejsaudiobutton.MediaFeatures_audiobutton.isFullScreen() || a.isFullScreen ? a.exitFullScreen() : a.enterFullScreen()
            }); else {
                var k = null;
                if (function () {
                    var h = document.createElement("x"), l = document.documentElement, r = window.getComputedStyle;
                    if (!("pointerEvents"in h.style))return false;
                    h.style.pointerEvents = "auto";
                    h.style.pointerEvents = "x";
                    l.appendChild(h);
                    r = r && r(h, "").pointerEvents === "auto";
                    l.removeChild(h);
                    return!!r
                }() && !mejsaudiobutton.MediaFeatures_audiobutton.isOpera) {
                    var j = false, m = function () {
                        if (j) {
                            for (var h in q)q[h].hide();
                            g.css("pointer-events",
                                "");
                            daudiobutton.controls.css("pointer-events", "");
                            daudiobutton.media.removeEventListener("click", daudiobutton.clickToPlayPauseCallback);
                            j = false
                        }
                    }, q = {};
                    b_audiobutton = ["top", "left", "right", "bottom"];
                    var p, t = function () {
                        var h = g.offset().left - daudiobutton.container.offset().left, l = g.offset().top - daudiobutton.container.offset().top, r = g.outerWidth(true), naudiobutton = g.outerHeight(true), o = daudiobutton.container.width(), s = daudiobutton.container.height();
                        for (p in q)q[p].css({position: "absolute", top: 0, left: 0});
                        q.top.width(o).height(l);
                        q.left.width(h).height(naudiobutton).css({top: l});
                        q.right.width(o - h - r).height(naudiobutton).css({top: l,
                            left: h + r});
                        q.bottom.width(o).height(s - naudiobutton - l).css({top: l + naudiobutton})
                    };
                    daudiobutton.globalBind("resize", function () {
                        t()
                    });
                    p = 0;
                    for (c_audiobutton = b_audiobutton.length; p < c_audiobutton; p++)q[b_audiobutton[p]] = f('<div class="mejs-fullscreen-hover" />').appendTo(daudiobutton.container).mouseover(m).hide();
                    g.on("mouseover", function () {
                        if (!daudiobutton.isFullScreen) {
                            var h = g.offset(), l = a.container.offset();
                            e.positionFullscreenButton(h.left - l.left, h.top - l.top, false);
                            g.css("pointer-events", "none");
                            daudiobutton.controls.css("pointer-events", "none");
                            daudiobutton.media.addEventListener("click", daudiobutton.clickToPlayPauseCallback);
                            for (p in q)q[p].show();
                            t();
                            j = true
                        }
                    });
                    e.addEventListener("fullscreenchange", function () {
                        daudiobutton.isFullScreen = !daudiobutton.isFullScreen;
                        daudiobutton.isFullScreen ? daudiobutton.media.removeEventListener("click", daudiobutton.clickToPlayPauseCallback) : daudiobutton.media.addEventListener("click", daudiobutton.clickToPlayPauseCallback);
                        m()
                    });
                    daudiobutton.globalBind("mousemove", function (h) {
                        if (j) {
                            var l = g.offset();
                            if (h.pageY < l.top || h.pageY > l.top + g.outerHeight(true) || h.pageX < l.left || h.pageX > l.left + g.outerWidth(true)) {
                                g.css("pointer-events", "");
                                daudiobutton.controls.css("pointer-events", "");
                                j = false
                            }
                        }
                    })
                } else g.on("mouseover",
                    function () {
                        if (k !== null) {
                            clearTimeout(k);
                            delete k
                        }
                        var h = g.offset(), l = a.container.offset();
                        e.positionFullscreenButton(h.left - l.left, h.top - l.top, true)
                    }).on("mouseout", function () {
                        if (k !== null) {
                            clearTimeout(k);
                            delete k
                        }
                        k = setTimeout(function () {
                            e.hideFullscreenButton()
                        }, 1500)
                    })
            }
            a.fullscreenBtn = g;
            daudiobutton.globalBind("keydown", function (h) {
                if ((mejsaudiobutton.MediaFeatures_audiobutton.hasTrueNativeFullScreen && mejsaudiobutton.MediaFeatures_audiobutton.isFullScreen() || daudiobutton.isFullScreen) && h.keyCode == 27)a.exitFullScreen()
            })
        }
    }, cleanfullscreen: function (a) {
        a.exitFullScreen()
    },
        containerSizeTimeout: null, enterFullScreen: function () {
            var a = this;
            if (!(a.media.pluginType !== "native" && (mejsaudiobutton.MediaFeatures_audiobutton.isFirefox || a.options.usePluginFullScreen))) {
                f(document.documentElement).addClass("mejs-fullscreen");
                normalHeight = a.container.height();
                normalWidth = a.container.width();
                if (a.media.pluginType === "native")if (mejsaudiobutton.MediaFeatures_audiobutton.hasTrueNativeFullScreen) {
                    mejsaudiobutton.MediaFeatures_audiobutton.requestFullScreen(a.container[0]);
                    a.isInIframe && setTimeout(function c_audiobutton() {
                        if (a.isNativeFullScreen)f(window).width() !==
                            screen.width ? a.exitFullScreen() : setTimeout(c_audiobutton, 500)
                    }, 500)
                } else if (mejsaudiobutton.MediaFeatures_audiobutton.hasSemiNativeFullScreen) {
                    a.media.webkitEnterFullscreen();
                    return
                }
                if (a.isInIframe) {
                    var b_audiobutton = a.options.newWindowCallback(this);
                    if (b_audiobutton !== "")if (mejsaudiobutton.MediaFeatures_audiobutton.hasTrueNativeFullScreen)setTimeout(function () {
                        if (!a.isNativeFullScreen) {
                            a.pause();
                            window.open(b_audiobutton, a.id, "top=0,left=0,width=" + screen.availWidth + ",height=" + screen.availHeight + ",resizable=yes,scrollbars=no,status=no,toolbar=no")
                        }
                    }, 250); else {
                        a.pause();
                        window.open(b_audiobutton, a.id,
                            "top=0,left=0,width=" + screen.availWidth + ",height=" + screen.availHeight + ",resizable=yes,scrollbars=no,status=no,toolbar=no");
                        return
                    }
                }
                a.container.addClass("mejs-container-fullscreen").width("100%").height("100%");
                a.containerSizeTimeout = setTimeout(function () {
                    a.container.css({width: "100%", height: "100%"});
                    a.setControlsSize()
                }, 500);
                if (a.media.pluginType === "native")a.$media.width("100%").height("100%"); else {
                    a.container.find(".mejs-shim").width("100%").height("100%");
                    a.media.setVideoSize(f(window).width(),
                        f(window).height())
                }
                a.layers.children("div").width("100%").height("100%");
                a.fullscreenBtn && a.fullscreenBtn.removeClass("mejs-fullscreen").addClass("mejs-unfullscreen");
                a.setControlsSize();
                a.isFullScreen = true
            }
        }, exitFullScreen: function () {
            clearTimeout(this.containerSizeTimeout);
            if (this.media.pluginType !== "native" && mejsaudiobutton.MediaFeatures_audiobutton.isFirefox)this.media.setFullscreen(false); else {
                if (mejsaudiobutton.MediaFeatures_audiobutton.hasTrueNativeFullScreen && (mejsaudiobutton.MediaFeatures_audiobutton.isFullScreen() || this.isFullScreen))mejsaudiobutton.MediaFeatures_audiobutton.cancelFullScreen();
                f(document.documentElement).removeClass("mejs-fullscreen");
                this.container.removeClass("mejs-container-fullscreen").width(normalWidth).height(normalHeight);
                if (this.media.pluginType === "native")this.$media.width(normalWidth).height(normalHeight); else {
                    this.container.find(".mejs-shim").width(normalWidth).height(normalHeight);
                    this.media.setVideoSize(normalWidth, normalHeight)
                }
                this.layers.children("div").width(normalWidth).height(normalHeight);
                this.fullscreenBtn.removeClass("mejs-unfullscreen").addClass("mejs-fullscreen");
                this.setControlsSize();
                this.isFullScreen = false
            }
        }})
})(mejsaudiobutton.$);
(function (f) {
    f.extend(mejsaudiobutton.MepDefaults, {startLanguage: "", tracksText: mejsaudiobutton.i18n.t("Captions/Subtitles"), hideCaptionsButtonWhenEmpty: true, toggleCaptionsButtonWhenOnlyOne: false, slidesSelector: ""});
    f.extend(AudioButtonPlayer.prototype, {hasChapters: false, buildtracks: function (a, b_audiobutton, c_audiobutton, e) {
        if (a.tracks.length != 0) {
            var daudiobutton;
            if (this.domNode.textTracks)for (daudiobutton = this.domNode.textTracks.length - 1; daudiobutton >= 0; daudiobutton--)this.domNode.textTracks[daudiobutton].mode = "hidden";
            a.chapters = f('<div class="mejs-chapters mejs-layer"></div>').prependTo(c_audiobutton).hide();
            a.captions =
                f('<div class="mejs-captions-layer mejs-layer"><div class="mejs-captions-position mejs-captions-position-hover"><span class="mejs-captions-text"></span></div></div>').prependTo(c_audiobutton).hide();
            a.captionsText = a.captions.find(".mejs-captions-text");
            a.captionsButton = f('<div class="mejs-button mejs-captions-button"><button type="button" aria-controls="' + this.id + '" title="' + this.options.tracksText + '" aria-label="' + this.options.tracksText + '"></button><div class="mejs-captions-selector"><ul><li><input type="radio" name="' +
                a.id + '_captions" id="' + a.id + '_captions_none" value="none" checked="checked" /><label for="' + a.id + '_captions_none">' + mejsaudiobutton.i18n.t("None") + "</label></li></ul></div></div>").appendTo(b_audiobutton);
            for (daudiobutton = b_audiobutton = 0; daudiobutton < a.tracks.length; daudiobutton++)a.tracks[daudiobutton].kind == "subtitles" && b_audiobutton++;
            this.options.toggleCaptionsButtonWhenOnlyOne && b_audiobutton == 1 ? a.captionsButton.on("click", function () {
                a.setTrack(a.selectedTrack == null ? a.tracks[0].srclang : "none")
            }) : a.captionsButton.hover(function () {
                    f(this).find(".mejs-captions-selector").css("visibility", "visible")
                },
                function () {
                    f(this).find(".mejs-captions-selector").css("visibility", "hidden")
                }).on("click", "input[type=radio]", function () {
                    lang = this.value;
                    a.setTrack(lang)
                });
            a.options.alwaysShowControls ? a.container.find(".mejs-captions-position").addClass("mejs-captions-position-hover") : a.container.bind("controlsshown",function () {
                a.container.find(".mejs-captions-position").addClass("mejs-captions-position-hover")
            }).bind("controlshidden", function () {
                e.paused || a.container.find(".mejs-captions-position").removeClass("mejs-captions-position-hover")
            });
            a.trackToLoad = -1;
            a.selectedTrack = null;
            a.isLoadingTrack = false;
            for (daudiobutton = 0; daudiobutton < a.tracks.length; daudiobutton++)a.tracks[daudiobutton].kind == "subtitles" && a.addTrackButton(a.tracks[daudiobutton].srclang, a.tracks[daudiobutton].label);
            a.loadNextTrack();
            e.addEventListener("timeupdate", function () {
                a.displayCaptions()
            }, false);
            if (a.options.slidesSelector != "") {
                a.slidesContainer = f(a.options.slidesSelector);
                e.addEventListener("timeupdate", function () {
                    a.displaySlides()
                }, false)
            }
            e.addEventListener("loadedmetadata", function () {
                a.displayChapters()
            }, false);
            a.container.hover(function () {
                if (a.hasChapters) {
                    a.chapters.css("visibility",
                        "visible");
                    a.chapters.fadeIn(200).height(a.chapters.find(".mejs-chapter").outerHeight())
                }
            }, function () {
                a.hasChapters && !e.paused && a.chapters.fadeOut(200, function () {
                    f(this).css("visibility", "hidden");
                    f(this).css("display", "block")
                })
            });
            a.node.getAttribute("autoplay") !== null && a.chapters.css("visibility", "hidden")
        }
    }, setTrack: function (a) {
        var b_audiobutton;
        if (a == "none") {
            this.selectedTrack = null;
            this.captionsButton.removeClass("mejs-captions-enabled")
        } else for (b_audiobutton = 0; b_audiobutton < this.tracks.length; b_audiobutton++)if (this.tracks[b_audiobutton].srclang == a) {
            this.selectedTrack ==
                null && this.captionsButton.addClass("mejs-captions-enabled");
            this.selectedTrack = this.tracks[b_audiobutton];
            this.captions.attr("lang", this.selectedTrack.srclang);
            this.displayCaptions();
            break
        }
    }, loadNextTrack: function () {
        this.trackToLoad++;
        if (this.trackToLoad < this.tracks.length) {
            this.isLoadingTrack = true;
            this.loadTrack(this.trackToLoad)
        } else {
            this.isLoadingTrack = false;
            this.checkForTracks()
        }
    }, loadTrack: function (a) {
        var b_audiobutton = this, c_audiobutton = b_audiobutton.tracks[a];
        f.ajax({url: c_audiobutton.src, dataType: "text", success: function (e) {
            c_audiobutton.entries = typeof e == "string" &&
                /<tt\s+xml/ig.exec(e) ? mejsaudiobutton.TrackFormatParser.dfxp.parse(e) : mejsaudiobutton.TrackFormatParser.webvvt.parse(e);
            c_audiobutton.isLoaded = true;
            b_audiobutton.enableTrackButton(c_audiobutton.srclang, c_audiobutton.label);
            b_audiobutton.loadNextTrack();
            c_audiobutton.kind == "chapters" && b_audiobutton.media.addEventListener("play", function () {
                b_audiobutton.media.duration > 0 && b_audiobutton.displayChapters(c_audiobutton)
            }, false);
            c_audiobutton.kind == "slides" && b_audiobutton.setupSlides(c_audiobutton)
        }, error: function () {
            b_audiobutton.loadNextTrack()
        }})
    }, enableTrackButton: function (a, b_audiobutton) {
        if (b_audiobutton === "")b_audiobutton = mejsaudiobutton.language.codes[a] || a;
        this.captionsButton.find("input[value=" + a + "]").prop("disabled", false).siblings("label").html(b_audiobutton);
        this.options.startLanguage == a && f("#" + this.id + "_captions_" + a).click();
        this.adjustLanguageBox()
    }, addTrackButton: function (a, b_audiobutton) {
        if (b_audiobutton === "")b_audiobutton = mejsaudiobutton.language.codes[a] || a;
        this.captionsButton.find("ul").append(f('<li><input type="radio" name="' + this.id + '_captions" id="' + this.id + "_captions_" + a + '" value="' + a + '" disabled="disabled" /><label for="' + this.id + "_captions_" + a + '">' + b_audiobutton + " (loading)</label></li>"));
        this.adjustLanguageBox();
        this.container.find(".mejs-captions-translations option[value=" + a + "]").remove()
    },
        adjustLanguageBox: function () {
            this.captionsButton.find(".mejs-captions-selector").height(this.captionsButton.find(".mejs-captions-selector ul").outerHeight(true) + this.captionsButton.find(".mejs-captions-translations").outerHeight(true))
        }, checkForTracks: function () {
            var a = false;
            if (this.options.hideCaptionsButtonWhenEmpty) {
                for (i = 0; i < this.tracks.length; i++)if (this.tracks[i].kind == "subtitles") {
                    a = true;
                    break
                }
                if (!a) {
                    this.captionsButton.hide();
                    this.setControlsSize()
                }
            }
        }, displayCaptions: function () {
            if (typeof this.tracks !=
                "undefined") {
                var a, b_audiobutton = this.selectedTrack;
                if (b_audiobutton != null && b_audiobutton.isLoaded)for (a = 0; a < b_audiobutton.entries.times.length; a++)if (this.media.currentTime >= b_audiobutton.entries.times[a].start && this.media.currentTime <= b_audiobutton.entries.times[a].stop) {
                    this.captionsText.html(b_audiobutton.entries.text[a]);
                    this.captions.show().height(0);
                    return
                }
                this.captions.hide()
            }
        }, setupSlides: function (a) {
            this.slides = a;
            this.slides.entries.imgs = [this.slides.entries.text.length];
            this.showSlide(0)
        }, showSlide: function (a) {
            if (!(typeof this.tracks == "undefined" || typeof this.slidesContainer ==
                "undefined")) {
                var b_audiobutton = this, c_audiobutton = b_audiobutton.slides.entries.text[a], e = b_audiobutton.slides.entries.imgs[a];
                if (typeof e == "undefined" || typeof e.fadeIn == "undefined")b_audiobutton.slides.entries.imgs[a] = e = f('<img src="' + c_audiobutton + '">').on("load", function () {
                    e.appendTo(b_audiobutton.slidesContainer).hide().fadeIn().siblings(":visible").fadeOut()
                }); else!e.is(":visible") && !e.is(":animated") && e.fadeIn().siblings(":visible").fadeOut()
            }
        }, displaySlides: function () {
            if (typeof this.slides != "undefined") {
                var a = this.slides, b_audiobutton;
                for (b_audiobutton = 0; b_audiobutton < a.entries.times.length; b_audiobutton++)if (this.media.currentTime >=
                    a.entries.times[b_audiobutton].start && this.media.currentTime <= a.entries.times[b_audiobutton].stop) {
                    this.showSlide(b_audiobutton);
                    break
                }
            }
        }, displayChapters: function () {
            var a;
            for (a = 0; a < this.tracks.length; a++)if (this.tracks[a].kind == "chapters" && this.tracks[a].isLoaded) {
                this.drawChapters(this.tracks[a]);
                this.hasChapters = true;
                break
            }
        }, drawChapters: function (a) {
            var b_audiobutton = this, c_audiobutton, e, daudiobutton = e = 0;
            b_audiobutton.chapters.empty();
            for (c_audiobutton = 0; c_audiobutton < a.entries.times.length; c_audiobutton++) {
                e = a.entries.times[c_audiobutton].stop - a.entries.times[c_audiobutton].start;
                e = Math.floor(e / b_audiobutton.media.duration * 100);
                if (e + daudiobutton > 100 || c_audiobutton == a.entries.times.length -
                    1 && e + daudiobutton < 100)e = 100 - daudiobutton;
                b_audiobutton.chapters.append(f('<div class="mejs-chapter" rel="' + a.entries.times[c_audiobutton].start + '" style="left: ' + daudiobutton.toString() + "%;width: " + e.toString() + '%;"><div class="mejs-chapter-block' + (c_audiobutton == a.entries.times.length - 1 ? " mejs-chapter-block-last" : "") + '"><span class="ch-title">' + a.entries.text[c_audiobutton] + '</span><span class="ch-time">' + mejsaudiobutton.Utility_audiobutton.secondsToTimeCode(a.entries.times[c_audiobutton].start) + "&ndash;" + mejsaudiobutton.Utility_audiobutton.secondsToTimeCode(a.entries.times[c_audiobutton].stop) + "</span></div></div>"));
                daudiobutton += e
            }
            b_audiobutton.chapters.find("div.mejs-chapter").click(function () {
                b_audiobutton.media.setCurrentTime(parseFloat(f(this).attr("rel")));
                b_audiobutton.media.paused && b_audiobutton.media.play()
            });
            b_audiobutton.chapters.show()
        }});
    mejsaudiobutton.language = {codes: {af: "Afrikaans", sq: "Albanian", ar: "Arabic", be: "Belarusian", bg: "Bulgarian", ca: "Catalan", zh: "Chinese", "zh-cn": "Chinese Simplified", "zh-tw": "Chinese Traditional", hr: "Croatian", cs: "Czech", da: "Danish", nl: "Dutch", en: "English", et: "Estonian", tl: "Filipino", fi: "Finnish", fr: "French", gl: "Galician", de: "German", el: "Greek", ht: "Haitian Creole", iw: "Hebrew", hi: "Hindi", hu: "Hungarian", is: "Icelandic", id: "Indonesian", ga: "Irish", it: "Italian", ja: "Japanese",
        ko: "Korean", lv: "Latvian", lt: "Lithuanian", mk: "Macedonian", ms: "Malay", mt: "Maltese", no: "Norwegian", fa: "Persian", pl: "Polish", pt: "Portuguese", ro: "Romanian", ru: "Russian", sr: "Serbian", sk: "Slovak", sl: "Slovenian", es: "Spanish", sw: "Swahili", sv: "Swedish", tl: "Tagalog", th: "Thai", tr: "Turkish", uk: "Ukrainian", vi: "Vietnamese", cy: "Welsh", yi: "Yiddish"}};
    mejsaudiobutton.TrackFormatParser = {webvvt: {pattern_identifier: /^([a-zA-z]+-)?[0-9]+$/, pattern_timecode: /^([0-9]{2}:[0-9]{2}:[0-9]{2}([,.][0-9]{1,3})?) --\> ([0-9]{2}:[0-9]{2}:[0-9]{2}([,.][0-9]{3})?)(.*)$/,
        parse: function (a) {
            var b_audiobutton = 0;
            a = mejsaudiobutton.TrackFormatParser.split2(a, /\r?\naudiobutton/);
            for (var c_audiobutton = {text: [], times: []}, e, daudiobutton; b_audiobutton < a.length; b_audiobutton++)if (this.pattern_identifier.exec(a[b_audiobutton])) {
                b_audiobutton++;
                if ((e = this.pattern_timecode.exec(a[b_audiobutton])) && b_audiobutton < a.length) {
                    b_audiobutton++;
                    daudiobutton = a[b_audiobutton];
                    for (b_audiobutton++; a[b_audiobutton] !== "" && b_audiobutton < a.length;) {
                        daudiobutton = daudiobutton + "\naudiobutton" + a[b_audiobutton];
                        b_audiobutton++
                    }
                    daudiobutton = f.trim(daudiobutton).replace(/(\b_audiobutton(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/ig, "<a href='$1' target='_blank'>$1</a>");
                    c_audiobutton.text.push(daudiobutton);
                    c_audiobutton.times.push({start: mejsaudiobutton.Utility_audiobutton.convertSMPTEtoSeconds(e[1]) == 0 ? 0.2 : mejsaudiobutton.Utility_audiobutton.convertSMPTEtoSeconds(e[1]),
                        stop: mejsaudiobutton.Utility_audiobutton.convertSMPTEtoSeconds(e[3]), settings: e[5]})
                }
            }
            return c_audiobutton
        }}, dfxp: {parse: function (a) {
        a = f(a).filter("tt");
        var b_audiobutton = 0;
        b_audiobutton = a.children("div").eq(0);
        var c_audiobutton = b_audiobutton.find("p");
        b_audiobutton = a.find("#" + b_audiobutton.attr("style"));
        var e, daudiobutton;
        a = {text: [], times: []};
        if (b_audiobutton.length) {
            daudiobutton = b_audiobutton.removeAttr("id").get(0).attributes;
            if (daudiobutton.length) {
                e = {};
                for (b_audiobutton = 0; b_audiobutton < daudiobutton.length; b_audiobutton++)e[daudiobutton[b_audiobutton].name.split(":")[1]] = daudiobutton[b_audiobutton].value
            }
        }
        for (b_audiobutton = 0; b_audiobutton < c_audiobutton.length; b_audiobutton++) {
            var g;
            daudiobutton = {start: null, stop: null, style: null};
            if (c_audiobutton.eq(b_audiobutton).attr("begin"))daudiobutton.start = mejsaudiobutton.Utility_audiobutton.convertSMPTEtoSeconds(c_audiobutton.eq(b_audiobutton).attr("begin"));
            if (!daudiobutton.start && c_audiobutton.eq(b_audiobutton - 1).attr("end"))daudiobutton.start = mejsaudiobutton.Utility_audiobutton.convertSMPTEtoSeconds(c_audiobutton.eq(b_audiobutton - 1).attr("end"));
            if (c_audiobutton.eq(b_audiobutton).attr("end"))daudiobutton.stop = mejsaudiobutton.Utility_audiobutton.convertSMPTEtoSeconds(c_audiobutton.eq(b_audiobutton).attr("end"));
            if (!daudiobutton.stop && c_audiobutton.eq(b_audiobutton + 1).attr("begin"))daudiobutton.stop = mejsaudiobutton.Utility_audiobutton.convertSMPTEtoSeconds(c_audiobutton.eq(b_audiobutton + 1).attr("begin"));
            if (e) {
                g = "";
                for (var k in e)g += k + ":" + e[k] + ";"
            }
            if (g)daudiobutton.style = g;
            if (daudiobutton.start == 0)daudiobutton.start = 0.2;
            a.times.push(daudiobutton);
            daudiobutton = f.trim(c_audiobutton.eq(b_audiobutton).html()).replace(/(\b_audiobutton(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/ig,
                "<a href='$1' target='_blank'>$1</a>");
            a.text.push(daudiobutton);
            if (a.times.start == 0)a.times.start = 2
        }
        return a
    }}, split2: function (a, b_audiobutton) {
        return a.split(b_audiobutton)
    }};
    if ("x\naudiobutton\ny".split(/\naudiobutton/gi).length != 3)mejsaudiobutton.TrackFormatParser.split2 = function (a, b_audiobutton) {
        var c_audiobutton = [], e = "", daudiobutton;
        for (daudiobutton = 0; daudiobutton < a.length; daudiobutton++) {
            e += a.substring(daudiobutton, daudiobutton + 1);
            if (b_audiobutton.test(e)) {
                c_audiobutton.push(e.replace(b_audiobutton, ""));
                e = ""
            }
        }
        c_audiobutton.push(e);
        return c_audiobutton
    }
})(mejsaudiobutton.$);
(function (f) {
    f.extend(mejsaudiobutton.MepDefaults, {contextMenuItems: [
        {render: function (a) {
            if (typeof a.enterFullScreen == "undefined")return null;
            return a.isFullScreen ? mejsaudiobutton.i18n.t("Turn off Fullscreen") : mejsaudiobutton.i18n.t("Go Fullscreen")
        }, click: function (a) {
            a.isFullScreen ? a.exitFullScreen() : a.enterFullScreen()
        }},
        {render: function (a) {
            return a.media.muted ? mejsaudiobutton.i18n.t("Unmute") : mejsaudiobutton.i18n.t("Mute")
        }, click: function (a) {
            a.media.muted ? a.setMuted(false) : a.setMuted(true)
        }},
        {isSeparator: true},
        {render: function () {
            return mejsaudiobutton.i18n.t("Download Video")
        },
            click: function (a) {
                window.location.href = a.media.currentSrc
            }}
    ]});
    f.extend(AudioButtonPlayer.prototype, {buildcontextmenu: function (a) {
        a.contextMenu = f('<div class="mejs-contextmenu"></div>').appendTo(f("body")).hide();
        a.container.bind("contextmenu", function (b_audiobutton) {
            if (a.isContextMenuEnabled) {
                b_audiobutton.preventDefault();
                a.renderContextMenu(b_audiobutton.clientX - 1, b_audiobutton.clientY - 1);
                return false
            }
        });
        a.container.bind("click", function () {
            a.contextMenu.hide()
        });
        a.contextMenu.bind("mouseleave", function () {
            a.startContextMenuTimer()
        })
    }, cleancontextmenu: function (a) {
        a.contextMenu.remove()
    },
        isContextMenuEnabled: true, enableContextMenu: function () {
            this.isContextMenuEnabled = true
        }, disableContextMenu: function () {
            this.isContextMenuEnabled = false
        }, contextMenuTimeout: null, startContextMenuTimer: function () {
            var a = this;
            a.killContextMenuTimer();
            a.contextMenuTimer = setTimeout(function () {
                a.hideContextMenu();
                a.killContextMenuTimer()
            }, 750)
        }, killContextMenuTimer: function () {
            var a = this.contextMenuTimer;
            if (a != null) {
                clearTimeout(a);
                delete a
            }
        }, hideContextMenu: function () {
            this.contextMenu.hide()
        }, renderContextMenu: function (a, b_audiobutton) {
            for (var c_audiobutton = this, e = "", daudiobutton = c_audiobutton.options.contextMenuItems, g = 0, k = daudiobutton.length; g < k; g++)if (daudiobutton[g].isSeparator)e += '<div class="mejs-contextmenu-separator"></div>'; else {
                var j = daudiobutton[g].render(c_audiobutton);
                if (j != null)e += '<div class="mejs-contextmenu-item" data-itemindex="' + g + '" id="element-' + Math.random() * 1E6 + '">' + j + "</div>"
            }
            c_audiobutton.contextMenu.empty().append(f(e)).css({top: b_audiobutton, left: a}).show();
            c_audiobutton.contextMenu.find(".mejs-contextmenu-item").each(function () {
                var m = f(this), q = parseInt(m.data("itemindex"), 10), p = c_audiobutton.options.contextMenuItems[q];
                typeof p.show !=
                    "undefined" && p.show(m, c_audiobutton);
                m.click(function () {
                    typeof p.click != "undefined" && p.click(c_audiobutton);
                    c_audiobutton.contextMenu.hide()
                })
            });
            setTimeout(function () {
                c_audiobutton.killControlsTimer("rev3")
            }, 100)
        }})
})(mejsaudiobutton.$);
(function (f) {
    f.extend(mejsaudiobutton.MepDefaults, {postrollCloseText: mejsaudiobutton.i18n.t("Close")});
    f.extend(AudioButtonPlayer.prototype, {buildpostroll: function (a, b_audiobutton, c_audiobutton) {
        var e = this.container.find('link[rel="postroll"]').attr("href");
        if (typeof e !== "undefined") {
            a.postroll = f('<div class="mejs-postroll-layer mejs-layer"><a class="mejs-postroll-close" onclick="$(this).parent().hide();return false;">' + this.options.postrollCloseText + '</a><div class="mejs-postroll-layer-content"></div></div>').prependTo(c_audiobutton).hide();
            this.media.addEventListener("ended",
                function () {
                    f.ajax({dataType: "html", url: e, success: function (daudiobutton) {
                        c_audiobutton.find(".mejs-postroll-layer-content").html(daudiobutton)
                    }});
                    a.postroll.show()
                }, false)
        }
    }})
})(mejsaudiobutton.$);

